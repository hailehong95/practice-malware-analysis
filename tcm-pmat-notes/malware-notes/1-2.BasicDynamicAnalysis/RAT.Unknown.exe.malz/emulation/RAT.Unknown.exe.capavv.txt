md5                     689ff2c6f94e31abba1ddebf68be810e
sha1                    69b8ecf6b7cde185daed76d66100b6a31fd1a668
sha256                  248d491f89a10ec3289ec4ca448b19384464329c442bac395f680c4f3a345c8c
path                    RAT.Unknown.exe.malz
timestamp               2022-08-04T09:21:33.747336
capa version            v3.2.0-0-gd9d72ad
os                      windows
format                  pe
arch                    amd64
extractor               VivisectFeatureExtractor
base address            0x400000
rules                   /tmp/_MEIiilwHT/rules
function count          622
library function count  4
total feature count     27407

compiled with Nim
namespace  compiler/nim
author     michael.hunhoff@mandiant.com
scope      file
examples   580c37831fe98a254eb6c61c692c70d8.exe_
or:
  substring: NimMain
    - "NimMain" @ 0x6BE92
    - "NimMainInner" @ 0x7B1D4
    - "NimMainModule" @ 0x7B149
  substring: NimMainModule
    - "NimMainModule" @ 0x7B149
  substring: NimMainInner
    - "NimMainInner" @ 0x7B1D4
  substring: io.nim
    - "io.nim" @ 0x15E49
    - "stdlib_io.nim.c" @ 0x659D0
  substring: fatal.nim
    - "fatal.nim" @ 0x15E0F, 0x16108
  substring: system.nim
    - "stdlib_system.nim.c" @ 0x769DA

reference Base64 string
namespace  data-manipulation/encoding/base64
author     moritz.raabe@mandiant.com
scope      file
att&ck     Defense Evasion::Obfuscated Files or Information [T1027]
mbc        Data::Encode Data::Base64 [C0026.001], Data::Check String [C0019]
examples   BFB9B5391A13D0AFD787E87AB90F14F5, 074072B261FC27B65C72671F13510C05, 5DB2D2BE20D59AA0BE6709A6850F1775
regex: /ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/
  - "@ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/" @ 0x17C8F

hash data using murmur3 (2 matches)
namespace   data-manipulation/hashing/murmur
author      william.ballenthin@mandiant.com
scope       function
mbc         Data::Non-Cryptographic Hash::MurmurHash [C0030.001]
references  https://github.com/aappleby/smhasher/blob/master/src/MurmurHash3.cpp
examples    c66172b12971a329f8d5ff01665f204b:0x404A18
function @ 0x409FD0
  or:
    subscope:
      and: = hash >> 16; hash >> 13; hash >> 16
        number: 0x10 @ 0x40A0C0, 0x40A0DF
        number: 0xD @ 0x40A0D1
        count(mnemonic(shr)): 3 @ 0x40A0C0, 0x40A0D1, 0x40A0DF
        optional:
          count(characteristic(nzxor)): 3 or more @ 0x40A0B0, 0x40A0BB, 0x40A0C4, 0x40A0D4, and 1 more...
    and:
      number: 0x85EBCA6B = 32-bit finalization mix constant 1 @ 0x40A0C7
      number: 0xC2B2AE35 = 32-bit finalization mix constant 2 @ 0x40A0D7
    and:
      number: 0xCC9E2D51 = c1 32-bit hash @ 0x40A054, 0x40A0A7
      number: 0x1B873593 = c2 32-bit hash @ 0x40A060, 0x40A0B5
    and:
      subscope:
        and: = k ROL r1
          mnemonic: rol @ 0x40A05D, 0x40A069
          number: 0xF = r1 @ 0x40A05D
        and: = k ROL r1
          mnemonic: rol @ 0x40A0B2
          number: 0xF = r1 @ 0x40A0B2
      subscope:
        and: = hash ROL r2
          mnemonic: rol @ 0x40A05D, 0x40A069
          number: 0xD = r2 @ 0x40A069
        and: = hash ROL r2
          mnemonic: rol @ 0x40A0B2
          number: 0xD = r2 @ 0x40A0D1
function @ 0x40A111
  or:
    subscope:
      and: = hash >> 16; hash >> 13; hash >> 16
        number: 0x10 @ 0x40A0C0, 0x40A0DF
        number: 0xD @ 0x40A0D1
        count(mnemonic(shr)): 3 @ 0x40A0C0, 0x40A0D1, 0x40A0DF
        optional:
          count(characteristic(nzxor)): 3 or more @ 0x40A0B0, 0x40A0BB, 0x40A0C4, 0x40A0D4, and 1 more...
    and:
      number: 0x85EBCA6B = 32-bit finalization mix constant 1 @ 0x40A0C7
      number: 0xC2B2AE35 = 32-bit finalization mix constant 2 @ 0x40A0D7
    and:
      number: 0xCC9E2D51 = c1 32-bit hash @ 0x40A054, 0x40A0A7
      number: 0x1B873593 = c2 32-bit hash @ 0x40A060, 0x40A0B5
    and:
      subscope:
        and: = k ROL r1
          mnemonic: rol @ 0x40A05D, 0x40A069
          number: 0xF = r1 @ 0x40A05D
        and: = k ROL r1
          mnemonic: rol @ 0x40A0B2
          number: 0xF = r1 @ 0x40A0B2
      subscope:
        and: = hash ROL r2
          mnemonic: rol @ 0x40A05D, 0x40A069
          number: 0xD = r2 @ 0x40A069
        and: = hash ROL r2
          mnemonic: rol @ 0x40A0B2
          number: 0xD = r2 @ 0x40A0D1

contain a resource (.rsrc) section
namespace  executable/pe/section/rsrc
author     moritz.raabe@mandiant.com
scope      file
examples   A933A1A402775CFA94B6BEE0963F4B46:0x41fd25
section: .rsrc @ 0x43B000

contain a thread local storage (.tls) section
namespace  executable/pe/section/tls
author     michael.hunhoff@mandiant.com
scope      file
examples   Practical Malware Analysis Lab 16-02.exe_
section: .tls @ 0x43A000

query environment variable
namespace  host-interaction/environment-variable
author     michael.hunhoff@mandiant.com, @_re_fox
scope      function
att&ck     Discovery::System Information Discovery [T1082]
examples   Practical Malware Analysis Lab 14-02.exe_:0x401880, 0761142efbda6c4b1e801223de723578:0x65483490
function @ 0x409C60
  or:
    api: msvcrt.getenv @ 0x409C91

write file on Windows (3 matches)
namespace  host-interaction/file-system/write
author     william.ballenthin@mandiant.com
scope      function
mbc        File System::Writes File [C0052]
examples   Practical Malware Analysis Lab 01-04.exe_:0x4011FC, 563653399B82CD443F120ECEFF836EA3678D4CF11D9B351BB737573C2D856299:0x1400025C4
function @ 0x4020B9
  and:
    os: windows
    or:
      api: fwrite @ 0x4020FA
function @ 0x402257
  and:
    os: windows
    or:
      api: fwrite @ 0x402289
function @ 0x4151A0
  and:
    os: windows
    or:
      api: fwrite @ 0x4151E2

get thread local storage value
namespace  host-interaction/process
author     michael.hunhoff@mandiant.com
scope      function
function @ 0x415BE0
  and:
    api: kernel32.TlsGetValue @ 0x415C12

allocate RWX memory
namespace  host-interaction/process/inject
author     moritz.raabe@mandiant.com
scope      basic block
mbc        Memory::Allocate Memory [C0007]
examples   Practical Malware Analysis Lab 03-03.exe_:0x4010EA, 563653399B82CD443F120ECEFF836EA3678D4CF11D9B351BB737573C2D856299:0x140001ABA
basic block @ 0x415370 in function 0x415210
  and:
    match: allocate memory @ 0x415370
      or:
        api: kernel32.VirtualProtect @ 0x415392
    number: 0x40 = PAGE_EXECUTE_READWRITE @ 0x41537A

terminate process
namespace  host-interaction/process/terminate
author     moritz.raabe@mandiant.com
scope      function
mbc        Process::Terminate Process [C0018]
examples   C91887D861D9BD4A5872249B641BC9F9:0x401A77, 9B7CCAA2AE6A5B96E3110EBCBC4311F6:0x10010307
function @ 0x414EC0
  and:
    or:
      api: kernel32.TerminateProcess @ 0x414F92

parse PE header (2 matches)
namespace  load-code/pe
author     moritz.raabe@mandiant.com
scope      function
att&ck     Execution::Shared Modules [T1129]
examples   9324D1A8AE37A36AE560C37448C9705A:0x403DD0
function @ 0x401010
  and:
    os: windows
    and:
      mnemonic: cmp @ 0x401051, 0x40105F, 0x4010A0, 0x4010C4, and 3 more...
      or:
        number: 0x4550 = IMAGE_NT_SIGNATURE (PE) @ 0x40105F
      or:
        number: 0x5A4D = IMAGE_DOS_SIGNATURE (MZ) @ 0x401051
function @ 0x415E60
  and:
    os: windows
    and:
      mnemonic: cmp @ 0x415E4A, 0x415E54, 0x415E60
      or:
        number: 0x4550 = IMAGE_NT_SIGNATURE (PE) @ 0x415E4A
      or:
        number: 0x5A4D = IMAGE_DOS_SIGNATURE (MZ) @ 0x415E60

reference startup folder
namespace  persistence/startup-folder
author     matthew.williams@mandiant.com
scope      file
att&ck     Persistence::Boot or Logon Autostart Execution::Registry Run Keys / Startup Folder [T1547.001]
or:
  regex: /Start Menu\\Programs\\Startup/i
    - "@AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup" @ 0x18EAF



