md5                     334a10500feb0f3444bf2e86ab2e76da
sha1                    c6a97b63fbd970984b95ae79a2b2aef5749ee463
sha256                  0c82e654c09c8fd9fdf4899718efa37670974c9eec5a8fc18a167f93cea6ee83
path                    putty.exe
timestamp               2022-08-05T09:38:07.542293
capa version            v3.2.0-0-gd9d72ad
os                      windows
format                  pe
arch                    i386
extractor               VivisectFeatureExtractor
base address            0x400000
rules                   /tmp/_MEIi9kMDi/rules
function count          2087
library function count  682
total feature count     117654

check for software breakpoints (2 matches)
namespace   anti-analysis/anti-debugging/debugger-detection
author      michael.hunhoff@mandiant.com
scope       function
mbc         Anti-Behavioral Analysis::Debugger Detection::Software Breakpoints [B0001.025]
references  https://github.com/LordNoteworthy/al-khaser/blob/master/al-khaser/AntiDebug/SoftwareBreakpoints.cpp
examples    al-khaser_x86.exe_:0x431020
function @ 0x4174DA
  and:
    subscope:
      and:
        mnemonic: cmp @ 0x417566
        or:
          number: 0xCC @ 0x417564
    match: contain loop @ 0x4174DA
      or:
        characteristic: loop @ 0x4174DA
        characteristic: tight loop @ 0x417523
function @ 0x431714
  and:
    subscope:
      and:
        mnemonic: cmp @ 0x4328C0
        or:
          number: 0xCC @ 0x4324E3, 0x4324EA, 0x432567, 0x4325DB, and 2 more...
    match: contain loop @ 0x431714
      or:
        characteristic: loop @ 0x431714
        characteristic: tight loop @ 0x431B2A

check for time delay via GetTickCount (2 matches)
namespace  anti-analysis/anti-debugging/debugger-detection
author     michael.hunhoff@mandiant.com
scope      function
mbc        Anti-Behavioral Analysis::Debugger Detection::Timing/Delay Check GetTickCount [B0001.032]
examples   Practical Malware Analysis Lab 16-03.exe_:0x4013d0
function @ 0x435F5C
  and:
    count(api(kernel32.GetTickCount)): 2 or more @ 0x435F8C, 0x435FCC
function @ 0x4677E0
  and:
    count(api(kernel32.GetTickCount)): 2 or more @ 0x4677FD, 0x46781A, 0x4678BC, 0x4678E3, and 1 more...

check for unmoving mouse cursor
namespace   anti-analysis/anti-vm/vm-detection
author      BitsOfBinary
scope       function
att&ck      Defense Evasion::Virtualization/Sandbox Evasion::User Activity Based Checks [T1497.002]
mbc         Anti-Behavioral Analysis::Virtual Machine Detection::Human User Check [B0009.012]
references  https://www.joesecurity.org/blog/5852460122427342172
examples    d7ff81ff775d4ab50d31ac1e962c8c4dea7ff9f280aa2b42ddd06760a5665002:0x401118
function @ 0x463795
  and:
    count(api(user32.GetCursorPos)): 2 or more @ 0x4637C6, 0x463810

contain obfuscated stackstrings
namespace  anti-analysis/obfuscation/string/stackstring
author     moritz.raabe@mandiant.com
scope      basic block
att&ck     Defense Evasion::Obfuscated Files or Information::Indicator Removal from Tools [T1027.005]
mbc        Anti-Static Analysis::Disassembler Evasion::Argument Obfuscation [B0012.001]
examples   Practical Malware Analysis Lab 16-03.exe_:0x4013D0
basic block @ 0x419831 in function 0x4195D5
  characteristic: stack string @ 0x419831

packed with generic packer
namespace  anti-analysis/packer/generic
author     william.ballenthin@mandiant.com
scope      function
att&ck     Defense Evasion::Obfuscated Files or Information::Software Packing [T1027.002]
mbc        Anti-Static Analysis::Software Packing::Standard Compression [F0001.002]
examples   Practical Malware Analysis Lab 18-01.exe_:0x409dc0
function @ 0x522000
  and:
    characteristic: cross section flow @ 0x475BE6, 0x52202C
    not:
      match: contain pusha popa sequence
    or:
      mnemonic: pushad @ 0x522000
    or:
      mnemonic: popad @ 0x52202B

get geographical location (3 matches)
namespace  collection
author     moritz.raabe
scope      function
att&ck     Discovery::System Location Discovery [T1614]
examples   9879D201DC5ACA863F357184CD1F170E:0x10001A99
function @ 0x462CF4
  or:
    api: GetLocaleInfo @ 0x463C72
function @ 0x4666A0
  or:
    api: GetLocaleInfo @ 0x4668A1
function @ 0x466884
  or:
    api: GetLocaleInfo @ 0x4668A1

log keystrokes via polling (3 matches)
namespace  collection/keylog
author     michael.hunhoff@mandiant.com
scope      function
att&ck     Collection::Input Capture::Keylogging [T1056.001]
mbc        Collection::Keylogging::Polling [F0002.002]
examples   Practical Malware Analysis Lab 11-03.dll_:0x10001030
function @ 0x462CF4
  or:
    api: user32.GetKeyboardState @ 0x463137, 0x4641BE, 0x4642AC
function @ 0x463795
  or:
    api: user32.GetKeyboardState @ 0x46389E, 0x4638D1
function @ 0x46A60B
  or:
    api: user32.GetKeyboardState @ 0x46A623

check HTTP status code
namespace  communication/http/client
author     @mr-tz
scope      function
mbc        Communication::HTTP Communication::Read Header [C0002.014]
examples   54ac78733552a62d1d05ea4ba3fc604bb49fe000d7fc948da45335b726e64d75:0x10001a20
function @ 0x462CF4
  and:
    os: windows
    subscope:
      and:
        or:
          mnemonic: cmp @ 0x46451B
        or:
          number: 0x190 = Bad Request @ 0x46451B
    or:
      number: 0x13 = HTTP_QUERY_STATUS_CODE @ 0x462E7A, 0x4655E5, 0x465D4B, 0x468E54

connect pipe (2 matches)
namespace  communication/named-pipe/connect
author     moritz.raabe@mandiant.com, michael.hunhoff@mandiant.com
scope      function
mbc        Communication::Interprocess Communication::Connect Pipe [C0003.002]
examples   152d4c9f63efb332ccb134c6953c0104:0x42e400
function @ 0x46FD27
  or:
    api: kernel32.ConnectNamedPipe @ 0x46FD5C
function @ 0x46FD33
  or:
    api: kernel32.ConnectNamedPipe @ 0x46FD5C

create pipe (4 matches)
namespace  communication/named-pipe/create
author     moritz.raabe@mandiant.com
scope      function
mbc        Communication::Interprocess Communication::Create Pipe [C0003.001]
examples   Practical Malware Analysis Lab 03-02.dll_:0x10003a13
function @ 0x46FBA0
  or:
    api: kernel32.CreateNamedPipe @ 0x46FC9E
function @ 0x46FD27
  or:
    api: kernel32.CreateNamedPipe @ 0x46FDE3
function @ 0x46FD33
  or:
    api: kernel32.CreateNamedPipe @ 0x46FDE3
function @ 0x4707A4
  or:
    api: kernel32.CreatePipe @ 0x470846, 0x470861, 0x47087C

encode data using Base64 (3 matches)
namespace  data-manipulation/encoding/base64
author     moritz.raabe@mandiant.com
scope      function
att&ck     Defense Evasion::Obfuscated Files or Information [T1027]
mbc        Defense Evasion::Obfuscated Files or Information::Encoding-Standard Algorithm [E1027.m02], Data::Encode Data::Base64 [C0026.001]
examples   BFB9B5391A13D0AFD787E87AB90F14F5:0x1314889C, 074072B261FC27B65C72671F13510C05:0x100049B2, 5DB2D2BE20D59AA0BE6709A6850F1775:0x18001CC30, 08AC667C65D36D6542917655571E61C8:0x406EAA
function @ 0x4527BE
  and:
    mnemonic: shl @ 0x452E7B, 0x452FA9, 0x4531D8, 0x4531F1, and 6 more...
    mnemonic: shr @ 0x4535CE, 0x45495B, 0x45565E
    number: 0x3F = modulo 64 @ 0x45323B
    match: contain loop @ 0x4527BE
      or:
        characteristic: loop @ 0x4527BE
        characteristic: tight loop @ 0x453B4C, 0x454C15, 0x454F8B
    or:
      number: 0x3D = '=' @ 0x4556A4
    optional:
      number: 0x2 @ 0x4528D1, 0x4528E7, 0x4529A5, 0x4529C9, and 57 more...
      number: 0x3 @ 0x4529AE, 0x4529DB, 0x4535C3, 0x453956, and 9 more...
      number: 0x4 @ 0x4529E4, 0x452A3E, 0x452A81, 0x452AC6, and 14 more...
      number: 0x6 @ 0x4537E5, 0x4553AA
      number: 0xF @ 0x452C92, 0x452E2D, 0x452E78, 0x4545BE, and 2 more...
function @ 0x4562CB
  and:
    mnemonic: shl @ 0x452E7B, 0x452FA9, 0x4531D8, 0x4531F1, and 6 more...
    mnemonic: shr @ 0x4535CE, 0x45495B, 0x45565E
    number: 0x3F = modulo 64 @ 0x45323B
    match: contain loop @ 0x4562CB
      or:
        characteristic: loop @ 0x4562CB
        characteristic: tight loop @ 0x453B4C, 0x454C15, 0x454F8B
    or:
      number: 0x3D = '=' @ 0x4556A4
    optional:
      number: 0x2 @ 0x4528D1, 0x4528E7, 0x4529A5, 0x4529C9, and 58 more...
      number: 0x3 @ 0x4529AE, 0x4529DB, 0x4535C3, 0x453956, and 9 more...
      number: 0x4 @ 0x4529E4, 0x452A3E, 0x452A81, 0x452AC6, and 14 more...
      number: 0x6 @ 0x4537E5, 0x4553AA
      number: 0xF @ 0x452C92, 0x452E2D, 0x452E78, 0x4545BE, and 2 more...
function @ 0x45B29B
  and:
    mnemonic: shl @ 0x45B333, 0x45B336, 0x45B33D
    mnemonic: shr @ 0x45B340
    number: 0x3F = modulo 64 @ 0x45B2F5, 0x45B368
    match: contain loop @ 0x45B29B
      or:
        characteristic: loop @ 0x45B29B
    or:
      number: 0x3D = '=' @ 0x45B2E7
    optional:
      number: 0x2 @ 0x45B32E
      number: 0x3 @ 0x45B374
      number: 0x4 @ 0x45B2DD, 0x45B309
      number: 0x6 @ 0x45B33D

reference Base64 string
namespace  data-manipulation/encoding/base64
author     moritz.raabe@mandiant.com
scope      file
att&ck     Defense Evasion::Obfuscated Files or Information [T1027]
mbc        Data::Encode Data::Base64 [C0026.001], Data::Check String [C0019]
examples   BFB9B5391A13D0AFD787E87AB90F14F5, 074072B261FC27B65C72671F13510C05, 5DB2D2BE20D59AA0BE6709A6850F1775
regex: /ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/
  - "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/" @ 0x9F5CC

encode data using XOR (65 matches)
namespace  data-manipulation/encoding/xor
author     moritz.raabe@mandiant.com
scope      basic block
att&ck     Defense Evasion::Obfuscated Files or Information [T1027]
mbc        Defense Evasion::Obfuscated Files or Information::Encoding-Standard Algorithm [E1027.m02], Data::Encode Data::XOR [C0026.002]
examples   2D3EDC218A90F03089CC01715A9F047F:0x403D7E
basic block @ 0x413ACF in function 0x413A92
  and:
    characteristic: tight loop @ 0x413ACF
    characteristic: nzxor @ 0x413AD8, 0x413AE3, 0x413AE9
    not: = filter for potential false positives
      or:
        or: = unsigned bitwise negation operation (~i)
          number: 0xFFFFFFFF = bitwise negation for unsigned 32 bits
          number: 0xFFFFFFFFFFFFFFFF = bitwise negation for unsigned 64 bits
        or: = signed bitwise negation operation (~i)
          number: 0xFFFFFFF = bitwise negation for signed 32 bits
          number: 0xFFFFFFFFFFFFFFF = bitwise negation for signed 64 bits
        or: = Magic constants used in the implementation of strings functions.
          number: 0x7EFEFEFF = optimized string constant for 32 bits
          number: 0x81010101 = -0x81010101 = 0x7EFEFEFF
          number: 0x81010100 = 0x81010100 = ~0x7EFEFEFF
          number: 0x7EFEFEFEFEFEFEFF = optimized string constant for 64 bits
          number: 0x8101010101010101 = -0x8101010101010101 = 0x7EFEFEFEFEFEFEFF
          number: 0x8101010101010100 = 0x8101010101010100 = ~0x7EFEFEFEFEFEFEFF
basic block @ 0x413D75 in function 0x413D21
  and:
    characteristic: tight loop @ 0x413D75
    characteristic: nzxor @ 0x413DA5, 0x413DAE, 0x413DB0, 0x413DB7
    not: = filter for potential false positives
      or:
        or: = unsigned bitwise negation operation (~i)
          number: 0xFFFFFFFF = bitwise negation for unsigned 32 bits
          number: 0xFFFFFFFFFFFFFFFF = bitwise negation for unsigned 64 bits
        or: = signed bitwise negation operation (~i)
          number: 0xFFFFFFF = bitwise negation for signed 32 bits
          number: 0xFFFFFFFFFFFFFFF = bitwise negation for signed 64 bits
        or: = Magic constants used in the implementation of strings functions.
          number: 0x7EFEFEFF = optimized string constant for 32 bits
          number: 0x81010101 = -0x81010101 = 0x7EFEFEFF
          number: 0x81010100 = 0x81010100 = ~0x7EFEFEFF
          number: 0x7EFEFEFEFEFEFEFF = optimized string constant for 64 bits
          number: 0x8101010101010101 = -0x8101010101010101 = 0x7EFEFEFEFEFEFEFF
          number: 0x8101010101010100 = 0x8101010101010100 = ~0x7EFEFEFEFEFEFEFF
basic block @ 0x413F15 in function 0x413EA2
  and:
    characteristic: tight loop @ 0x413F15
    characteristic: nzxor @ 0x413F1F, 0x413F23
    not: = filter for potential false positives
      or:
        or: = unsigned bitwise negation operation (~i)
          number: 0xFFFFFFFF = bitwise negation for unsigned 32 bits
          number: 0xFFFFFFFFFFFFFFFF = bitwise negation for unsigned 64 bits
        or: = signed bitwise negation operation (~i)
          number: 0xFFFFFFF = bitwise negation for signed 32 bits
          number: 0xFFFFFFFFFFFFFFF = bitwise negation for signed 64 bits
        or: = Magic constants used in the implementation of strings functions.
          number: 0x7EFEFEFF = optimized string constant for 32 bits
          number: 0x81010101 = -0x81010101 = 0x7EFEFEFF
          number: 0x81010100 = 0x81010100 = ~0x7EFEFEFF
          number: 0x7EFEFEFEFEFEFEFF = optimized string constant for 64 bits
          number: 0x8101010101010101 = -0x8101010101010101 = 0x7EFEFEFEFEFEFEFF
          number: 0x8101010101010100 = 0x8101010101010100 = ~0x7EFEFEFEFEFEFEFF
basic block @ 0x4142EE in function 0x41428B
  and:
    characteristic: tight loop @ 0x4142EE
    characteristic: nzxor @ 0x4142F7, 0x4142FD, 0x414302
    not: = filter for potential false positives
      or:
        or: = unsigned bitwise negation operation (~i)
          number: 0xFFFFFFFF = bitwise negation for unsigned 32 bits
          number: 0xFFFFFFFFFFFFFFFF = bitwise negation for unsigned 64 bits
        or: = signed bitwise negation operation (~i)
          number: 0xFFFFFFF = bitwise negation for signed 32 bits
          number: 0xFFFFFFFFFFFFFFF = bitwise negation for signed 64 bits
        or: = Magic constants used in the implementation of strings functions.
          number: 0x7EFEFEFF = optimized string constant for 32 bits
          number: 0x81010101 = -0x81010101 = 0x7EFEFEFF
          number: 0x81010100 = 0x81010100 = ~0x7EFEFEFF
          number: 0x7EFEFEFEFEFEFEFF = optimized string constant for 64 bits
          number: 0x8101010101010101 = -0x8101010101010101 = 0x7EFEFEFEFEFEFEFF
          number: 0x8101010101010100 = 0x8101010101010100 = ~0x7EFEFEFEFEFEFEFF
basic block @ 0x415E34 in function 0x415D13
  and:
    characteristic: tight loop @ 0x415E34
    characteristic: nzxor @ 0x415E4D, 0x415E5D
    not: = filter for potential false positives
      or:
        or: = unsigned bitwise negation operation (~i)
          number: 0xFFFFFFFF = bitwise negation for unsigned 32 bits
          number: 0xFFFFFFFFFFFFFFFF = bitwise negation for unsigned 64 bits
        or: = signed bitwise negation operation (~i)
          number: 0xFFFFFFF = bitwise negation for signed 32 bits
          number: 0xFFFFFFFFFFFFFFF = bitwise negation for signed 64 bits
        or: = Magic constants used in the implementation of strings functions.
          number: 0x7EFEFEFF = optimized string constant for 32 bits
          number: 0x81010101 = -0x81010101 = 0x7EFEFEFF
          number: 0x81010100 = 0x81010100 = ~0x7EFEFEFF
          number: 0x7EFEFEFEFEFEFEFF = optimized string constant for 64 bits
          number: 0x8101010101010101 = -0x8101010101010101 = 0x7EFEFEFEFEFEFEFF
          number: 0x8101010101010100 = 0x8101010101010100 = ~0x7EFEFEFEFEFEFEFF
basic block @ 0x430D84 in function 0x42D6E5
  and:
    characteristic: tight loop @ 0x430D84
    characteristic: nzxor @ 0x430D8B
    not: = filter for potential false positives
      or:
        or: = unsigned bitwise negation operation (~i)
          number: 0xFFFFFFFF = bitwise negation for unsigned 32 bits
          number: 0xFFFFFFFFFFFFFFFF = bitwise negation for unsigned 64 bits
        or: = signed bitwise negation operation (~i)
          number: 0xFFFFFFF = bitwise negation for signed 32 bits
          number: 0xFFFFFFFFFFFFFFF = bitwise negation for signed 64 bits
        or: = Magic constants used in the implementation of strings functions.
          number: 0x7EFEFEFF = optimized string constant for 32 bits
          number: 0x81010101 = -0x81010101 = 0x7EFEFEFF
          number: 0x81010100 = 0x81010100 = ~0x7EFEFEFF
          number: 0x7EFEFEFEFEFEFEFF = optimized string constant for 64 bits
          number: 0x8101010101010101 = -0x8101010101010101 = 0x7EFEFEFEFEFEFEFF
          number: 0x8101010101010100 = 0x8101010101010100 = ~0x7EFEFEFEFEFEFEFF
basic block @ 0x430FE4 in function 0x430FC9
  and:
    characteristic: tight loop @ 0x430FE4
    characteristic: nzxor @ 0x430FE8, 0x430FEC
    not: = filter for potential false positives
      or:
        or: = unsigned bitwise negation operation (~i)
          number: 0xFFFFFFFF = bitwise negation for unsigned 32 bits
          number: 0xFFFFFFFFFFFFFFFF = bitwise negation for unsigned 64 bits
        or: = signed bitwise negation operation (~i)
          number: 0xFFFFFFF = bitwise negation for signed 32 bits
          number: 0xFFFFFFFFFFFFFFF = bitwise negation for signed 64 bits
        or: = Magic constants used in the implementation of strings functions.
          number: 0x7EFEFEFF = optimized string constant for 32 bits
          number: 0x81010101 = -0x81010101 = 0x7EFEFEFF
          number: 0x81010100 = 0x81010100 = ~0x7EFEFEFF
          number: 0x7EFEFEFEFEFEFEFF = optimized string constant for 64 bits
          number: 0x8101010101010101 = -0x8101010101010101 = 0x7EFEFEFEFEFEFEFF
          number: 0x8101010101010100 = 0x8101010101010100 = ~0x7EFEFEFEFEFEFEFF
basic block @ 0x43107E in function 0x431063
  and:
    characteristic: tight loop @ 0x43107E
    characteristic: nzxor @ 0x43108A, 0x4310E2
    not: = filter for potential false positives
      or:
        or: = unsigned bitwise negation operation (~i)
          number: 0xFFFFFFFF = bitwise negation for unsigned 32 bits
          number: 0xFFFFFFFFFFFFFFFF = bitwise negation for unsigned 64 bits
        or: = signed bitwise negation operation (~i)
          number: 0xFFFFFFF = bitwise negation for signed 32 bits
          number: 0xFFFFFFFFFFFFFFF = bitwise negation for signed 64 bits
        or: = Magic constants used in the implementation of strings functions.
          number: 0x7EFEFEFF = optimized string constant for 32 bits
          number: 0x81010101 = -0x81010101 = 0x7EFEFEFF
          number: 0x81010100 = 0x81010100 = ~0x7EFEFEFF
          number: 0x7EFEFEFEFEFEFEFF = optimized string constant for 64 bits
          number: 0x8101010101010101 = -0x8101010101010101 = 0x7EFEFEFEFEFEFEFF
          number: 0x8101010101010100 = 0x8101010101010100 = ~0x7EFEFEFEFEFEFEFF
basic block @ 0x4311C9 in function 0x43119A
  and:
    characteristic: tight loop @ 0x4311C9
    characteristic: nzxor @ 0x4311CE, 0x431234
    not: = filter for potential false positives
      or:
        or: = unsigned bitwise negation operation (~i)
          number: 0xFFFFFFFF = bitwise negation for unsigned 32 bits
          number: 0xFFFFFFFFFFFFFFFF = bitwise negation for unsigned 64 bits
        or: = signed bitwise negation operation (~i)
          number: 0xFFFFFFF = bitwise negation for signed 32 bits
          number: 0xFFFFFFFFFFFFFFF = bitwise negation for signed 64 bits
        or: = Magic constants used in the implementation of strings functions.
          number: 0x7EFEFEFF = optimized string constant for 32 bits
          number: 0x81010101 = -0x81010101 = 0x7EFEFEFF
          number: 0x81010100 = 0x81010100 = ~0x7EFEFEFF
          number: 0x7EFEFEFEFEFEFEFF = optimized string constant for 64 bits
          number: 0x8101010101010101 = -0x8101010101010101 = 0x7EFEFEFEFEFEFEFF
          number: 0x8101010101010100 = 0x8101010101010100 = ~0x7EFEFEFEFEFEFEFF
basic block @ 0x431287 in function 0x43126C
  and:
    characteristic: tight loop @ 0x431287
    characteristic: nzxor @ 0x43128B, 0x43128F
    not: = filter for potential false positives
      or:
        or: = unsigned bitwise negation operation (~i)
          number: 0xFFFFFFFF = bitwise negation for unsigned 32 bits
          number: 0xFFFFFFFFFFFFFFFF = bitwise negation for unsigned 64 bits
        or: = signed bitwise negation operation (~i)
          number: 0xFFFFFFF = bitwise negation for signed 32 bits
          number: 0xFFFFFFFFFFFFFFF = bitwise negation for signed 64 bits
        or: = Magic constants used in the implementation of strings functions.
          number: 0x7EFEFEFF = optimized string constant for 32 bits
          number: 0x81010101 = -0x81010101 = 0x7EFEFEFF
          number: 0x81010100 = 0x81010100 = ~0x7EFEFEFF
          number: 0x7EFEFEFEFEFEFEFF = optimized string constant for 64 bits
          number: 0x8101010101010101 = -0x8101010101010101 = 0x7EFEFEFEFEFEFEFF
          number: 0x8101010101010100 = 0x8101010101010100 = ~0x7EFEFEFEFEFEFEFF
basic block @ 0x431337 in function 0x43131C
  and:
    characteristic: tight loop @ 0x431337
    characteristic: nzxor @ 0x431343, 0x4313A7
    not: = filter for potential false positives
      or:
        or: = unsigned bitwise negation operation (~i)
          number: 0xFFFFFFFF = bitwise negation for unsigned 32 bits
          number: 0xFFFFFFFFFFFFFFFF = bitwise negation for unsigned 64 bits
        or: = signed bitwise negation operation (~i)
          number: 0xFFFFFFF = bitwise negation for signed 32 bits
          number: 0xFFFFFFFFFFFFFFF = bitwise negation for signed 64 bits
        or: = Magic constants used in the implementation of strings functions.
          number: 0x7EFEFEFF = optimized string constant for 32 bits
          number: 0x81010101 = -0x81010101 = 0x7EFEFEFF
          number: 0x81010100 = 0x81010100 = ~0x7EFEFEFF
          number: 0x7EFEFEFEFEFEFEFF = optimized string constant for 64 bits
          number: 0x8101010101010101 = -0x8101010101010101 = 0x7EFEFEFEFEFEFEFF
          number: 0x8101010101010100 = 0x8101010101010100 = ~0x7EFEFEFEFEFEFEFF
basic block @ 0x4313F3 in function 0x4313C4
  and:
    characteristic: tight loop @ 0x4313F3
    characteristic: nzxor @ 0x4313F8, 0x431470
    not: = filter for potential false positives
      or:
        or: = unsigned bitwise negation operation (~i)
          number: 0xFFFFFFFF = bitwise negation for unsigned 32 bits
          number: 0xFFFFFFFFFFFFFFFF = bitwise negation for unsigned 64 bits
        or: = signed bitwise negation operation (~i)
          number: 0xFFFFFFF = bitwise negation for signed 32 bits
          number: 0xFFFFFFFFFFFFFFF = bitwise negation for signed 64 bits
        or: = Magic constants used in the implementation of strings functions.
          number: 0x7EFEFEFF = optimized string constant for 32 bits
          number: 0x81010101 = -0x81010101 = 0x7EFEFEFF
          number: 0x81010100 = 0x81010100 = ~0x7EFEFEFF
          number: 0x7EFEFEFEFEFEFEFF = optimized string constant for 64 bits
          number: 0x8101010101010101 = -0x8101010101010101 = 0x7EFEFEFEFEFEFEFF
          number: 0x8101010101010100 = 0x8101010101010100 = ~0x7EFEFEFEFEFEFEFF
basic block @ 0x4314C3 in function 0x4314A8
  and:
    characteristic: tight loop @ 0x4314C3
    characteristic: nzxor @ 0x4314C7, 0x4314CB
    not: = filter for potential false positives
      or:
        or: = unsigned bitwise negation operation (~i)
          number: 0xFFFFFFFF = bitwise negation for unsigned 32 bits
          number: 0xFFFFFFFFFFFFFFFF = bitwise negation for unsigned 64 bits
        or: = signed bitwise negation operation (~i)
          number: 0xFFFFFFF = bitwise negation for signed 32 bits
          number: 0xFFFFFFFFFFFFFFF = bitwise negation for signed 64 bits
        or: = Magic constants used in the implementation of strings functions.
          number: 0x7EFEFEFF = optimized string constant for 32 bits
          number: 0x81010101 = -0x81010101 = 0x7EFEFEFF
          number: 0x81010100 = 0x81010100 = ~0x7EFEFEFF
          number: 0x7EFEFEFEFEFEFEFF = optimized string constant for 64 bits
          number: 0x8101010101010101 = -0x8101010101010101 = 0x7EFEFEFEFEFEFEFF
          number: 0x8101010101010100 = 0x8101010101010100 = ~0x7EFEFEFEFEFEFEFF
basic block @ 0x431585 in function 0x43156A
  and:
    characteristic: tight loop @ 0x431585
    characteristic: nzxor @ 0x431591, 0x431601
    not: = filter for potential false positives
      or:
        or: = unsigned bitwise negation operation (~i)
          number: 0xFFFFFFFF = bitwise negation for unsigned 32 bits
          number: 0xFFFFFFFFFFFFFFFF = bitwise negation for unsigned 64 bits
        or: = signed bitwise negation operation (~i)
          number: 0xFFFFFFF = bitwise negation for signed 32 bits
          number: 0xFFFFFFFFFFFFFFF = bitwise negation for signed 64 bits
        or: = Magic constants used in the implementation of strings functions.
          number: 0x7EFEFEFF = optimized string constant for 32 bits
          number: 0x81010101 = -0x81010101 = 0x7EFEFEFF
          number: 0x81010100 = 0x81010100 = ~0x7EFEFEFF
          number: 0x7EFEFEFEFEFEFEFF = optimized string constant for 64 bits
          number: 0x8101010101010101 = -0x8101010101010101 = 0x7EFEFEFEFEFEFEFF
          number: 0x8101010101010100 = 0x8101010101010100 = ~0x7EFEFEFEFEFEFEFF
basic block @ 0x43164D in function 0x43161E
  and:
    characteristic: tight loop @ 0x43164D
    characteristic: nzxor @ 0x431652, 0x4316DC
    not: = filter for potential false positives
      or:
        or: = unsigned bitwise negation operation (~i)
          number: 0xFFFFFFFF = bitwise negation for unsigned 32 bits
          number: 0xFFFFFFFFFFFFFFFF = bitwise negation for unsigned 64 bits
        or: = signed bitwise negation operation (~i)
          number: 0xFFFFFFF = bitwise negation for signed 32 bits
          number: 0xFFFFFFFFFFFFFFF = bitwise negation for signed 64 bits
        or: = Magic constants used in the implementation of strings functions.
          number: 0x7EFEFEFF = optimized string constant for 32 bits
          number: 0x81010101 = -0x81010101 = 0x7EFEFEFF
          number: 0x81010100 = 0x81010100 = ~0x7EFEFEFF
          number: 0x7EFEFEFEFEFEFEFF = optimized string constant for 64 bits
          number: 0x8101010101010101 = -0x8101010101010101 = 0x7EFEFEFEFEFEFEFF
          number: 0x8101010101010100 = 0x8101010101010100 = ~0x7EFEFEFEFEFEFEFF
basic block @ 0x431B2A in function 0x431714
  and:
    characteristic: tight loop @ 0x431B2A
    characteristic: nzxor @ 0x431B3F, 0x431B52, 0x431B5E, 0x431B71, and 102 more...
    not: = filter for potential false positives
      or:
        or: = unsigned bitwise negation operation (~i)
          number: 0xFFFFFFFF = bitwise negation for unsigned 32 bits
          number: 0xFFFFFFFFFFFFFFFF = bitwise negation for unsigned 64 bits
        or: = signed bitwise negation operation (~i)
          number: 0xFFFFFFF = bitwise negation for signed 32 bits
          number: 0xFFFFFFFFFFFFFFF = bitwise negation for signed 64 bits
        or: = Magic constants used in the implementation of strings functions.
          number: 0x7EFEFEFF = optimized string constant for 32 bits
          number: 0x81010101 = -0x81010101 = 0x7EFEFEFF
          number: 0x81010100 = 0x81010100 = ~0x7EFEFEFF
          number: 0x7EFEFEFEFEFEFEFF = optimized string constant for 64 bits
          number: 0x8101010101010101 = -0x8101010101010101 = 0x7EFEFEFEFEFEFEFF
          number: 0x8101010101010100 = 0x8101010101010100 = ~0x7EFEFEFEFEFEFEFF
basic block @ 0x433071 in function 0x4328D5
  and:
    characteristic: tight loop @ 0x433071
    characteristic: nzxor @ 0x43307D, 0x43308D, 0x433091, 0x4330A0, and 156 more...
    not: = filter for potential false positives
      or:
        or: = unsigned bitwise negation operation (~i)
          number: 0xFFFFFFFF = bitwise negation for unsigned 32 bits
          number: 0xFFFFFFFFFFFFFFFF = bitwise negation for unsigned 64 bits
        or: = signed bitwise negation operation (~i)
          number: 0xFFFFFFF = bitwise negation for signed 32 bits
          number: 0xFFFFFFFFFFFFFFF = bitwise negation for signed 64 bits
        or: = Magic constants used in the implementation of strings functions.
          number: 0x7EFEFEFF = optimized string constant for 32 bits
          number: 0x81010101 = -0x81010101 = 0x7EFEFEFF
          number: 0x81010100 = 0x81010100 = ~0x7EFEFEFF
          number: 0x7EFEFEFEFEFEFEFF = optimized string constant for 64 bits
          number: 0x8101010101010101 = -0x8101010101010101 = 0x7EFEFEFEFEFEFEFF
          number: 0x8101010101010100 = 0x8101010101010100 = ~0x7EFEFEFEFEFEFEFF
basic block @ 0x433AF3 in function 0x4328D5
  and:
    characteristic: tight loop @ 0x433AF3
    characteristic: nzxor @ 0x433B50, 0x433B5E, 0x433B65, 0x433B6F, and 24 more...
    not: = filter for potential false positives
      or:
        or: = unsigned bitwise negation operation (~i)
          number: 0xFFFFFFFF = bitwise negation for unsigned 32 bits
          number: 0xFFFFFFFFFFFFFFFF = bitwise negation for unsigned 64 bits
        or: = signed bitwise negation operation (~i)
          number: 0xFFFFFFF = bitwise negation for signed 32 bits
          number: 0xFFFFFFFFFFFFFFF = bitwise negation for signed 64 bits
        or: = Magic constants used in the implementation of strings functions.
          number: 0x7EFEFEFF = optimized string constant for 32 bits
          number: 0x81010101 = -0x81010101 = 0x7EFEFEFF
          number: 0x81010100 = 0x81010100 = ~0x7EFEFEFF
          number: 0x7EFEFEFEFEFEFEFF = optimized string constant for 64 bits
          number: 0x8101010101010101 = -0x8101010101010101 = 0x7EFEFEFEFEFEFEFF
          number: 0x8101010101010100 = 0x8101010101010100 = ~0x7EFEFEFEFEFEFEFF
basic block @ 0x433D0A in function 0x4328D5
  and:
    characteristic: tight loop @ 0x433D0A
    characteristic: nzxor @ 0x433D10, 0x433D17, 0x433D24, 0x433D2B
    not: = filter for potential false positives
      or:
        or: = unsigned bitwise negation operation (~i)
          number: 0xFFFFFFFF = bitwise negation for unsigned 32 bits
          number: 0xFFFFFFFFFFFFFFFF = bitwise negation for unsigned 64 bits
        or: = signed bitwise negation operation (~i)
          number: 0xFFFFFFF = bitwise negation for signed 32 bits
          number: 0xFFFFFFFFFFFFFFF = bitwise negation for signed 64 bits
        or: = Magic constants used in the implementation of strings functions.
          number: 0x7EFEFEFF = optimized string constant for 32 bits
          number: 0x81010101 = -0x81010101 = 0x7EFEFEFF
          number: 0x81010100 = 0x81010100 = ~0x7EFEFEFF
          number: 0x7EFEFEFEFEFEFEFF = optimized string constant for 64 bits
          number: 0x8101010101010101 = -0x8101010101010101 = 0x7EFEFEFEFEFEFEFF
          number: 0x8101010101010100 = 0x8101010101010100 = ~0x7EFEFEFEFEFEFEFF
basic block @ 0x43455B in function 0x433D99
  and:
    characteristic: tight loop @ 0x43455B
    characteristic: nzxor @ 0x434569, 0x434580, 0x43458E, 0x4345A8, and 108 more...
    not: = filter for potential false positives
      or:
        or: = unsigned bitwise negation operation (~i)
          number: 0xFFFFFFFF = bitwise negation for unsigned 32 bits
          number: 0xFFFFFFFFFFFFFFFF = bitwise negation for unsigned 64 bits
        or: = signed bitwise negation operation (~i)
          number: 0xFFFFFFF = bitwise negation for signed 32 bits
          number: 0xFFFFFFFFFFFFFFF = bitwise negation for signed 64 bits
        or: = Magic constants used in the implementation of strings functions.
          number: 0x7EFEFEFF = optimized string constant for 32 bits
          number: 0x81010101 = -0x81010101 = 0x7EFEFEFF
          number: 0x81010100 = 0x81010100 = ~0x7EFEFEFF
          number: 0x7EFEFEFEFEFEFEFF = optimized string constant for 64 bits
          number: 0x8101010101010101 = -0x8101010101010101 = 0x7EFEFEFEFEFEFEFF
          number: 0x8101010101010100 = 0x8101010101010100 = ~0x7EFEFEFEFEFEFEFF
basic block @ 0x434FE9 in function 0x433D99
  and:
    characteristic: tight loop @ 0x434FE9
    characteristic: nzxor @ 0x43504B, 0x435059, 0x435066, 0x435071, and 24 more...
    not: = filter for potential false positives
      or:
        or: = unsigned bitwise negation operation (~i)
          number: 0xFFFFFFFF = bitwise negation for unsigned 32 bits
          number: 0xFFFFFFFFFFFFFFFF = bitwise negation for unsigned 64 bits
        or: = signed bitwise negation operation (~i)
          number: 0xFFFFFFF = bitwise negation for signed 32 bits
          number: 0xFFFFFFFFFFFFFFF = bitwise negation for signed 64 bits
        or: = Magic constants used in the implementation of strings functions.
          number: 0x7EFEFEFF = optimized string constant for 32 bits
          number: 0x81010101 = -0x81010101 = 0x7EFEFEFF
          number: 0x81010100 = 0x81010100 = ~0x7EFEFEFF
          number: 0x7EFEFEFEFEFEFEFF = optimized string constant for 64 bits
          number: 0x8101010101010101 = -0x8101010101010101 = 0x7EFEFEFEFEFEFEFF
          number: 0x8101010101010100 = 0x8101010101010100 = ~0x7EFEFEFEFEFEFEFF
basic block @ 0x43550A in function 0x4354E7
  and:
    characteristic: tight loop @ 0x43550A
    characteristic: nzxor @ 0x435539
    not: = filter for potential false positives
      or:
        or: = unsigned bitwise negation operation (~i)
          number: 0xFFFFFFFF = bitwise negation for unsigned 32 bits
          number: 0xFFFFFFFFFFFFFFFF = bitwise negation for unsigned 64 bits
        or: = signed bitwise negation operation (~i)
          number: 0xFFFFFFF = bitwise negation for signed 32 bits
          number: 0xFFFFFFFFFFFFFFF = bitwise negation for signed 64 bits
        or: = Magic constants used in the implementation of strings functions.
          number: 0x7EFEFEFF = optimized string constant for 32 bits
          number: 0x81010101 = -0x81010101 = 0x7EFEFEFF
          number: 0x81010100 = 0x81010100 = ~0x7EFEFEFF
          number: 0x7EFEFEFEFEFEFEFF = optimized string constant for 64 bits
          number: 0x8101010101010101 = -0x8101010101010101 = 0x7EFEFEFEFEFEFEFF
          number: 0x8101010101010100 = 0x8101010101010100 = ~0x7EFEFEFEFEFEFEFF
basic block @ 0x436028 in function 0x436003
  and:
    characteristic: tight loop @ 0x436028
    characteristic: nzxor @ 0x43602F, 0x436032
    not: = filter for potential false positives
      or:
        or: = unsigned bitwise negation operation (~i)
          number: 0xFFFFFFFF = bitwise negation for unsigned 32 bits
          number: 0xFFFFFFFFFFFFFFFF = bitwise negation for unsigned 64 bits
        or: = signed bitwise negation operation (~i)
          number: 0xFFFFFFF = bitwise negation for signed 32 bits
          number: 0xFFFFFFFFFFFFFFF = bitwise negation for signed 64 bits
        or: = Magic constants used in the implementation of strings functions.
          number: 0x7EFEFEFF = optimized string constant for 32 bits
          number: 0x81010101 = -0x81010101 = 0x7EFEFEFF
          number: 0x81010100 = 0x81010100 = ~0x7EFEFEFF
          number: 0x7EFEFEFEFEFEFEFF = optimized string constant for 64 bits
          number: 0x8101010101010101 = -0x8101010101010101 = 0x7EFEFEFEFEFEFEFF
          number: 0x8101010101010100 = 0x8101010101010100 = ~0x7EFEFEFEFEFEFEFF
basic block @ 0x4360A3 in function 0x436003
  and:
    characteristic: tight loop @ 0x4360A3
    characteristic: nzxor @ 0x4360AA, 0x4360B1, 0x4360B8, 0x4360BB
    not: = filter for potential false positives
      or:
        or: = unsigned bitwise negation operation (~i)
          number: 0xFFFFFFFF = bitwise negation for unsigned 32 bits
          number: 0xFFFFFFFFFFFFFFFF = bitwise negation for unsigned 64 bits
        or: = signed bitwise negation operation (~i)
          number: 0xFFFFFFF = bitwise negation for signed 32 bits
          number: 0xFFFFFFFFFFFFFFF = bitwise negation for signed 64 bits
        or: = Magic constants used in the implementation of strings functions.
          number: 0x7EFEFEFF = optimized string constant for 32 bits
          number: 0x81010101 = -0x81010101 = 0x7EFEFEFF
          number: 0x81010100 = 0x81010100 = ~0x7EFEFEFF
          number: 0x7EFEFEFEFEFEFEFF = optimized string constant for 64 bits
          number: 0x8101010101010101 = -0x8101010101010101 = 0x7EFEFEFEFEFEFEFF
          number: 0x8101010101010100 = 0x8101010101010100 = ~0x7EFEFEFEFEFEFEFF
basic block @ 0x436FA3 in function 0x436E30
  and:
    characteristic: tight loop @ 0x436FA3
    characteristic: nzxor @ 0x436FE4, 0x436FEE, 0x437017, 0x437028, and 45 more...
    not: = filter for potential false positives
      or:
        or: = unsigned bitwise negation operation (~i)
          number: 0xFFFFFFFF = bitwise negation for unsigned 32 bits
          number: 0xFFFFFFFFFFFFFFFF = bitwise negation for unsigned 64 bits
        or: = signed bitwise negation operation (~i)
          number: 0xFFFFFFF = bitwise negation for signed 32 bits
          number: 0xFFFFFFFFFFFFFFF = bitwise negation for signed 64 bits
        or: = Magic constants used in the implementation of strings functions.
          number: 0x7EFEFEFF = optimized string constant for 32 bits
          number: 0x81010101 = -0x81010101 = 0x7EFEFEFF
          number: 0x81010100 = 0x81010100 = ~0x7EFEFEFF
          number: 0x7EFEFEFEFEFEFEFF = optimized string constant for 64 bits
          number: 0x8101010101010101 = -0x8101010101010101 = 0x7EFEFEFEFEFEFEFF
          number: 0x8101010101010100 = 0x8101010101010100 = ~0x7EFEFEFEFEFEFEFF
basic block @ 0x437805 in function 0x436E30
  and:
    characteristic: tight loop @ 0x437805
    characteristic: nzxor @ 0x437817, 0x437821
    not: = filter for potential false positives
      or:
        or: = unsigned bitwise negation operation (~i)
          number: 0xFFFFFFFF = bitwise negation for unsigned 32 bits
          number: 0xFFFFFFFFFFFFFFFF = bitwise negation for unsigned 64 bits
        or: = signed bitwise negation operation (~i)
          number: 0xFFFFFFF = bitwise negation for signed 32 bits
          number: 0xFFFFFFFFFFFFFFF = bitwise negation for signed 64 bits
        or: = Magic constants used in the implementation of strings functions.
          number: 0x7EFEFEFF = optimized string constant for 32 bits
          number: 0x81010101 = -0x81010101 = 0x7EFEFEFF
          number: 0x81010100 = 0x81010100 = ~0x7EFEFEFF
          number: 0x7EFEFEFEFEFEFEFF = optimized string constant for 64 bits
          number: 0x8101010101010101 = -0x8101010101010101 = 0x7EFEFEFEFEFEFEFF
          number: 0x8101010101010100 = 0x8101010101010100 = ~0x7EFEFEFEFEFEFEFF
basic block @ 0x437C4F in function 0x437C0A
  and:
    characteristic: tight loop @ 0x437C4F
    characteristic: nzxor @ 0x437C64, 0x437C83, 0x437C9D, 0x437CB4
    not: = filter for potential false positives
      or:
        or: = unsigned bitwise negation operation (~i)
          number: 0xFFFFFFFF = bitwise negation for unsigned 32 bits
          number: 0xFFFFFFFFFFFFFFFF = bitwise negation for unsigned 64 bits
        or: = signed bitwise negation operation (~i)
          number: 0xFFFFFFF = bitwise negation for signed 32 bits
          number: 0xFFFFFFFFFFFFFFF = bitwise negation for signed 64 bits
        or: = Magic constants used in the implementation of strings functions.
          number: 0x7EFEFEFF = optimized string constant for 32 bits
          number: 0x81010101 = -0x81010101 = 0x7EFEFEFF
          number: 0x81010100 = 0x81010100 = ~0x7EFEFEFF
          number: 0x7EFEFEFEFEFEFEFF = optimized string constant for 64 bits
          number: 0x8101010101010101 = -0x8101010101010101 = 0x7EFEFEFEFEFEFEFF
          number: 0x8101010101010100 = 0x8101010101010100 = ~0x7EFEFEFEFEFEFEFF
basic block @ 0x437CF1 in function 0x437C0A
  and:
    characteristic: tight loop @ 0x437CF1
    characteristic: nzxor @ 0x437D0C
    not: = filter for potential false positives
      or:
        or: = unsigned bitwise negation operation (~i)
          number: 0xFFFFFFFF = bitwise negation for unsigned 32 bits
          number: 0xFFFFFFFFFFFFFFFF = bitwise negation for unsigned 64 bits
        or: = signed bitwise negation operation (~i)
          number: 0xFFFFFFF = bitwise negation for signed 32 bits
          number: 0xFFFFFFFFFFFFFFF = bitwise negation for signed 64 bits
        or: = Magic constants used in the implementation of strings functions.
          number: 0x7EFEFEFF = optimized string constant for 32 bits
          number: 0x81010101 = -0x81010101 = 0x7EFEFEFF
          number: 0x81010100 = 0x81010100 = ~0x7EFEFEFF
          number: 0x7EFEFEFEFEFEFEFF = optimized string constant for 64 bits
          number: 0x8101010101010101 = -0x8101010101010101 = 0x7EFEFEFEFEFEFEFF
          number: 0x8101010101010100 = 0x8101010101010100 = ~0x7EFEFEFEFEFEFEFF
basic block @ 0x437D84 in function 0x437C0A
  and:
    characteristic: tight loop @ 0x437D84
    characteristic: nzxor @ 0x437D9F
    not: = filter for potential false positives
      or:
        or: = unsigned bitwise negation operation (~i)
          number: 0xFFFFFFFF = bitwise negation for unsigned 32 bits
          number: 0xFFFFFFFFFFFFFFFF = bitwise negation for unsigned 64 bits
        or: = signed bitwise negation operation (~i)
          number: 0xFFFFFFF = bitwise negation for signed 32 bits
          number: 0xFFFFFFFFFFFFFFF = bitwise negation for signed 64 bits
        or: = Magic constants used in the implementation of strings functions.
          number: 0x7EFEFEFF = optimized string constant for 32 bits
          number: 0x81010101 = -0x81010101 = 0x7EFEFEFF
          number: 0x81010100 = 0x81010100 = ~0x7EFEFEFF
          number: 0x7EFEFEFEFEFEFEFF = optimized string constant for 64 bits
          number: 0x8101010101010101 = -0x8101010101010101 = 0x7EFEFEFEFEFEFEFF
          number: 0x8101010101010100 = 0x8101010101010100 = ~0x7EFEFEFEFEFEFEFF
basic block @ 0x437E17 in function 0x437C0A
  and:
    characteristic: tight loop @ 0x437E17
    characteristic: nzxor @ 0x437E32
    not: = filter for potential false positives
      or:
        or: = unsigned bitwise negation operation (~i)
          number: 0xFFFFFFFF = bitwise negation for unsigned 32 bits
          number: 0xFFFFFFFFFFFFFFFF = bitwise negation for unsigned 64 bits
        or: = signed bitwise negation operation (~i)
          number: 0xFFFFFFF = bitwise negation for signed 32 bits
          number: 0xFFFFFFFFFFFFFFF = bitwise negation for signed 64 bits
        or: = Magic constants used in the implementation of strings functions.
          number: 0x7EFEFEFF = optimized string constant for 32 bits
          number: 0x81010101 = -0x81010101 = 0x7EFEFEFF
          number: 0x81010100 = 0x81010100 = ~0x7EFEFEFF
          number: 0x7EFEFEFEFEFEFEFF = optimized string constant for 64 bits
          number: 0x8101010101010101 = -0x8101010101010101 = 0x7EFEFEFEFEFEFEFF
          number: 0x8101010101010100 = 0x8101010101010100 = ~0x7EFEFEFEFEFEFEFF
basic block @ 0x437EB2 in function 0x437C0A
  and:
    characteristic: tight loop @ 0x437EB2
    characteristic: nzxor @ 0x437ECD
    not: = filter for potential false positives
      or:
        or: = unsigned bitwise negation operation (~i)
          number: 0xFFFFFFFF = bitwise negation for unsigned 32 bits
          number: 0xFFFFFFFFFFFFFFFF = bitwise negation for unsigned 64 bits
        or: = signed bitwise negation operation (~i)
          number: 0xFFFFFFF = bitwise negation for signed 32 bits
          number: 0xFFFFFFFFFFFFFFF = bitwise negation for signed 64 bits
        or: = Magic constants used in the implementation of strings functions.
          number: 0x7EFEFEFF = optimized string constant for 32 bits
          number: 0x81010101 = -0x81010101 = 0x7EFEFEFF
          number: 0x81010100 = 0x81010100 = ~0x7EFEFEFF
          number: 0x7EFEFEFEFEFEFEFF = optimized string constant for 64 bits
          number: 0x8101010101010101 = -0x8101010101010101 = 0x7EFEFEFEFEFEFEFF
          number: 0x8101010101010100 = 0x8101010101010100 = ~0x7EFEFEFEFEFEFEFF
basic block @ 0x437F4C in function 0x437C0A
  and:
    characteristic: tight loop @ 0x437F4C
    characteristic: nzxor @ 0x437F67
    not: = filter for potential false positives
      or:
        or: = unsigned bitwise negation operation (~i)
          number: 0xFFFFFFFF = bitwise negation for unsigned 32 bits
          number: 0xFFFFFFFFFFFFFFFF = bitwise negation for unsigned 64 bits
        or: = signed bitwise negation operation (~i)
          number: 0xFFFFFFF = bitwise negation for signed 32 bits
          number: 0xFFFFFFFFFFFFFFF = bitwise negation for signed 64 bits
        or: = Magic constants used in the implementation of strings functions.
          number: 0x7EFEFEFF = optimized string constant for 32 bits
          number: 0x81010101 = -0x81010101 = 0x7EFEFEFF
          number: 0x81010100 = 0x81010100 = ~0x7EFEFEFF
          number: 0x7EFEFEFEFEFEFEFF = optimized string constant for 64 bits
          number: 0x8101010101010101 = -0x8101010101010101 = 0x7EFEFEFEFEFEFEFF
          number: 0x8101010101010100 = 0x8101010101010100 = ~0x7EFEFEFEFEFEFEFF
basic block @ 0x438118 in function 0x4380C9
  and:
    characteristic: tight loop @ 0x438118
    characteristic: nzxor @ 0x438118, 0x43811A
    not: = filter for potential false positives
      or:
        or: = unsigned bitwise negation operation (~i)
          number: 0xFFFFFFFF = bitwise negation for unsigned 32 bits
          number: 0xFFFFFFFFFFFFFFFF = bitwise negation for unsigned 64 bits
        or: = signed bitwise negation operation (~i)
          number: 0xFFFFFFF = bitwise negation for signed 32 bits
          number: 0xFFFFFFFFFFFFFFF = bitwise negation for signed 64 bits
        or: = Magic constants used in the implementation of strings functions.
          number: 0x7EFEFEFF = optimized string constant for 32 bits
          number: 0x81010101 = -0x81010101 = 0x7EFEFEFF
          number: 0x81010100 = 0x81010100 = ~0x7EFEFEFF
          number: 0x7EFEFEFEFEFEFEFF = optimized string constant for 64 bits
          number: 0x8101010101010101 = -0x8101010101010101 = 0x7EFEFEFEFEFEFEFF
          number: 0x8101010101010100 = 0x8101010101010100 = ~0x7EFEFEFEFEFEFEFF
basic block @ 0x4381D5 in function 0x438181
  and:
    characteristic: tight loop @ 0x4381D5
    characteristic: nzxor @ 0x438201, 0x438205
    not: = filter for potential false positives
      or:
        or: = unsigned bitwise negation operation (~i)
          number: 0xFFFFFFFF = bitwise negation for unsigned 32 bits
          number: 0xFFFFFFFFFFFFFFFF = bitwise negation for unsigned 64 bits
        or: = signed bitwise negation operation (~i)
          number: 0xFFFFFFF = bitwise negation for signed 32 bits
          number: 0xFFFFFFFFFFFFFFF = bitwise negation for signed 64 bits
        or: = Magic constants used in the implementation of strings functions.
          number: 0x7EFEFEFF = optimized string constant for 32 bits
          number: 0x81010101 = -0x81010101 = 0x7EFEFEFF
          number: 0x81010100 = 0x81010100 = ~0x7EFEFEFF
          number: 0x7EFEFEFEFEFEFEFF = optimized string constant for 64 bits
          number: 0x8101010101010101 = -0x8101010101010101 = 0x7EFEFEFEFEFEFEFF
          number: 0x8101010101010100 = 0x8101010101010100 = ~0x7EFEFEFEFEFEFEFF
basic block @ 0x4382CD in function 0x43827D
  and:
    characteristic: tight loop @ 0x4382CD
    characteristic: nzxor @ 0x4382D5, 0x4382D9
    not: = filter for potential false positives
      or:
        or: = unsigned bitwise negation operation (~i)
          number: 0xFFFFFFFF = bitwise negation for unsigned 32 bits
          number: 0xFFFFFFFFFFFFFFFF = bitwise negation for unsigned 64 bits
        or: = signed bitwise negation operation (~i)
          number: 0xFFFFFFF = bitwise negation for signed 32 bits
          number: 0xFFFFFFFFFFFFFFF = bitwise negation for signed 64 bits
        or: = Magic constants used in the implementation of strings functions.
          number: 0x7EFEFEFF = optimized string constant for 32 bits
          number: 0x81010101 = -0x81010101 = 0x7EFEFEFF
          number: 0x81010100 = 0x81010100 = ~0x7EFEFEFF
          number: 0x7EFEFEFEFEFEFEFF = optimized string constant for 64 bits
          number: 0x8101010101010101 = -0x8101010101010101 = 0x7EFEFEFEFEFEFEFF
          number: 0x8101010101010100 = 0x8101010101010100 = ~0x7EFEFEFEFEFEFEFF
basic block @ 0x4383A2 in function 0x438347
  and:
    characteristic: tight loop @ 0x4383A2
    characteristic: nzxor @ 0x4383CC, 0x4383D4
    not: = filter for potential false positives
      or:
        or: = unsigned bitwise negation operation (~i)
          number: 0xFFFFFFFF = bitwise negation for unsigned 32 bits
          number: 0xFFFFFFFFFFFFFFFF = bitwise negation for unsigned 64 bits
        or: = signed bitwise negation operation (~i)
          number: 0xFFFFFFF = bitwise negation for signed 32 bits
          number: 0xFFFFFFFFFFFFFFF = bitwise negation for signed 64 bits
        or: = Magic constants used in the implementation of strings functions.
          number: 0x7EFEFEFF = optimized string constant for 32 bits
          number: 0x81010101 = -0x81010101 = 0x7EFEFEFF
          number: 0x81010100 = 0x81010100 = ~0x7EFEFEFF
          number: 0x7EFEFEFEFEFEFEFF = optimized string constant for 64 bits
          number: 0x8101010101010101 = -0x8101010101010101 = 0x7EFEFEFEFEFEFEFF
          number: 0x8101010101010100 = 0x8101010101010100 = ~0x7EFEFEFEFEFEFEFF
basic block @ 0x43848D in function 0x438436
  and:
    characteristic: tight loop @ 0x43848D
    characteristic: nzxor @ 0x4384A9, 0x4384B4
    not: = filter for potential false positives
      or:
        or: = unsigned bitwise negation operation (~i)
          number: 0xFFFFFFFF = bitwise negation for unsigned 32 bits
          number: 0xFFFFFFFFFFFFFFFF = bitwise negation for unsigned 64 bits
        or: = signed bitwise negation operation (~i)
          number: 0xFFFFFFF = bitwise negation for signed 32 bits
          number: 0xFFFFFFFFFFFFFFF = bitwise negation for signed 64 bits
        or: = Magic constants used in the implementation of strings functions.
          number: 0x7EFEFEFF = optimized string constant for 32 bits
          number: 0x81010101 = -0x81010101 = 0x7EFEFEFF
          number: 0x81010100 = 0x81010100 = ~0x7EFEFEFF
          number: 0x7EFEFEFEFEFEFEFF = optimized string constant for 64 bits
          number: 0x8101010101010101 = -0x8101010101010101 = 0x7EFEFEFEFEFEFEFF
          number: 0x8101010101010100 = 0x8101010101010100 = ~0x7EFEFEFEFEFEFEFF
basic block @ 0x43920B in function 0x43915C
  and:
    characteristic: tight loop @ 0x43920B
    characteristic: nzxor @ 0x439215, 0x439220, 0x43922B, 0x439236, and 28 more...
    not: = filter for potential false positives
      or:
        or: = unsigned bitwise negation operation (~i)
          number: 0xFFFFFFFF = bitwise negation for unsigned 32 bits
          number: 0xFFFFFFFFFFFFFFFF = bitwise negation for unsigned 64 bits
        or: = signed bitwise negation operation (~i)
          number: 0xFFFFFFF = bitwise negation for signed 32 bits
          number: 0xFFFFFFFFFFFFFFF = bitwise negation for signed 64 bits
        or: = Magic constants used in the implementation of strings functions.
          number: 0x7EFEFEFF = optimized string constant for 32 bits
          number: 0x81010101 = -0x81010101 = 0x7EFEFEFF
          number: 0x81010100 = 0x81010100 = ~0x7EFEFEFF
          number: 0x7EFEFEFEFEFEFEFF = optimized string constant for 64 bits
          number: 0x8101010101010101 = -0x8101010101010101 = 0x7EFEFEFEFEFEFEFF
          number: 0x8101010101010100 = 0x8101010101010100 = ~0x7EFEFEFEFEFEFEFF
basic block @ 0x43A6D6 in function 0x43A6C0
  and:
    characteristic: tight loop @ 0x43A6D6
    characteristic: nzxor @ 0x43A6DA, 0x43A6EA, 0x43A6F8, 0x43A6FA, and 3 more...
    not: = filter for potential false positives
      or:
        or: = unsigned bitwise negation operation (~i)
          number: 0xFFFFFFFF = bitwise negation for unsigned 32 bits
          number: 0xFFFFFFFFFFFFFFFF = bitwise negation for unsigned 64 bits
        or: = signed bitwise negation operation (~i)
          number: 0xFFFFFFF = bitwise negation for signed 32 bits
          number: 0xFFFFFFFFFFFFFFF = bitwise negation for signed 64 bits
        or: = Magic constants used in the implementation of strings functions.
          number: 0x7EFEFEFF = optimized string constant for 32 bits
          number: 0x81010101 = -0x81010101 = 0x7EFEFEFF
          number: 0x81010100 = 0x81010100 = ~0x7EFEFEFF
          number: 0x7EFEFEFEFEFEFEFF = optimized string constant for 64 bits
          number: 0x8101010101010101 = -0x8101010101010101 = 0x7EFEFEFEFEFEFEFF
          number: 0x8101010101010100 = 0x8101010101010100 = ~0x7EFEFEFEFEFEFEFF
basic block @ 0x43A9C9 in function 0x43A976
  and:
    characteristic: tight loop @ 0x43A9C9
    characteristic: nzxor @ 0x43A9CE, 0x43A9D0
    not: = filter for potential false positives
      or:
        or: = unsigned bitwise negation operation (~i)
          number: 0xFFFFFFFF = bitwise negation for unsigned 32 bits
          number: 0xFFFFFFFFFFFFFFFF = bitwise negation for unsigned 64 bits
        or: = signed bitwise negation operation (~i)
          number: 0xFFFFFFF = bitwise negation for signed 32 bits
          number: 0xFFFFFFFFFFFFFFF = bitwise negation for signed 64 bits
        or: = Magic constants used in the implementation of strings functions.
          number: 0x7EFEFEFF = optimized string constant for 32 bits
          number: 0x81010101 = -0x81010101 = 0x7EFEFEFF
          number: 0x81010100 = 0x81010100 = ~0x7EFEFEFF
          number: 0x7EFEFEFEFEFEFEFF = optimized string constant for 64 bits
          number: 0x8101010101010101 = -0x8101010101010101 = 0x7EFEFEFEFEFEFEFF
          number: 0x8101010101010100 = 0x8101010101010100 = ~0x7EFEFEFEFEFEFEFF
basic block @ 0x43AABE in function 0x43AA90
  and:
    characteristic: tight loop @ 0x43AABE
    characteristic: nzxor @ 0x43AAC6, 0x43AACA, 0x43AAD1, 0x43AADF, and 28 more...
    not: = filter for potential false positives
      or:
        or: = unsigned bitwise negation operation (~i)
          number: 0xFFFFFFFF = bitwise negation for unsigned 32 bits
          number: 0xFFFFFFFFFFFFFFFF = bitwise negation for unsigned 64 bits
        or: = signed bitwise negation operation (~i)
          number: 0xFFFFFFF = bitwise negation for signed 32 bits
          number: 0xFFFFFFFFFFFFFFF = bitwise negation for signed 64 bits
        or: = Magic constants used in the implementation of strings functions.
          number: 0x7EFEFEFF = optimized string constant for 32 bits
          number: 0x81010101 = -0x81010101 = 0x7EFEFEFF
          number: 0x81010100 = 0x81010100 = ~0x7EFEFEFF
          number: 0x7EFEFEFEFEFEFEFF = optimized string constant for 64 bits
          number: 0x8101010101010101 = -0x8101010101010101 = 0x7EFEFEFEFEFEFEFF
          number: 0x8101010101010100 = 0x8101010101010100 = ~0x7EFEFEFEFEFEFEFF
basic block @ 0x43B034 in function 0x43AFF7
  and:
    characteristic: tight loop @ 0x43B034
    characteristic: nzxor @ 0x43B04D, 0x43B05B, 0x43B05D, 0x43B06D, and 28 more...
    not: = filter for potential false positives
      or:
        or: = unsigned bitwise negation operation (~i)
          number: 0xFFFFFFFF = bitwise negation for unsigned 32 bits
          number: 0xFFFFFFFFFFFFFFFF = bitwise negation for unsigned 64 bits
        or: = signed bitwise negation operation (~i)
          number: 0xFFFFFFF = bitwise negation for signed 32 bits
          number: 0xFFFFFFFFFFFFFFF = bitwise negation for signed 64 bits
        or: = Magic constants used in the implementation of strings functions.
          number: 0x7EFEFEFF = optimized string constant for 32 bits
          number: 0x81010101 = -0x81010101 = 0x7EFEFEFF
          number: 0x81010100 = 0x81010100 = ~0x7EFEFEFF
          number: 0x7EFEFEFEFEFEFEFF = optimized string constant for 64 bits
          number: 0x8101010101010101 = -0x8101010101010101 = 0x7EFEFEFEFEFEFEFF
          number: 0x8101010101010100 = 0x8101010101010100 = ~0x7EFEFEFEFEFEFEFF
basic block @ 0x43B759 in function 0x43B71C
  and:
    characteristic: tight loop @ 0x43B759
    characteristic: nzxor @ 0x43B76C, 0x43B77A, 0x43B77C, 0x43B78C, and 32 more...
    not: = filter for potential false positives
      or:
        or: = unsigned bitwise negation operation (~i)
          number: 0xFFFFFFFF = bitwise negation for unsigned 32 bits
          number: 0xFFFFFFFFFFFFFFFF = bitwise negation for unsigned 64 bits
        or: = signed bitwise negation operation (~i)
          number: 0xFFFFFFF = bitwise negation for signed 32 bits
          number: 0xFFFFFFFFFFFFFFF = bitwise negation for signed 64 bits
        or: = Magic constants used in the implementation of strings functions.
          number: 0x7EFEFEFF = optimized string constant for 32 bits
          number: 0x81010101 = -0x81010101 = 0x7EFEFEFF
          number: 0x81010100 = 0x81010100 = ~0x7EFEFEFF
          number: 0x7EFEFEFEFEFEFEFF = optimized string constant for 64 bits
          number: 0x8101010101010101 = -0x8101010101010101 = 0x7EFEFEFEFEFEFEFF
          number: 0x8101010101010100 = 0x8101010101010100 = ~0x7EFEFEFEFEFEFEFF
basic block @ 0x43BC16 in function 0x43BBA7
  and:
    characteristic: tight loop @ 0x43BC16
    characteristic: nzxor @ 0x43BC24
    not: = filter for potential false positives
      or:
        or: = unsigned bitwise negation operation (~i)
          number: 0xFFFFFFFF = bitwise negation for unsigned 32 bits
          number: 0xFFFFFFFFFFFFFFFF = bitwise negation for unsigned 64 bits
        or: = signed bitwise negation operation (~i)
          number: 0xFFFFFFF = bitwise negation for signed 32 bits
          number: 0xFFFFFFFFFFFFFFF = bitwise negation for signed 64 bits
        or: = Magic constants used in the implementation of strings functions.
          number: 0x7EFEFEFF = optimized string constant for 32 bits
          number: 0x81010101 = -0x81010101 = 0x7EFEFEFF
          number: 0x81010100 = 0x81010100 = ~0x7EFEFEFF
          number: 0x7EFEFEFEFEFEFEFF = optimized string constant for 64 bits
          number: 0x8101010101010101 = -0x8101010101010101 = 0x7EFEFEFEFEFEFEFF
          number: 0x8101010101010100 = 0x8101010101010100 = ~0x7EFEFEFEFEFEFEFF
basic block @ 0x43F548 in function 0x43F4E5
  and:
    characteristic: tight loop @ 0x43F548
    characteristic: nzxor @ 0x43F550
    not: = filter for potential false positives
      or:
        or: = unsigned bitwise negation operation (~i)
          number: 0xFFFFFFFF = bitwise negation for unsigned 32 bits
          number: 0xFFFFFFFFFFFFFFFF = bitwise negation for unsigned 64 bits
        or: = signed bitwise negation operation (~i)
          number: 0xFFFFFFF = bitwise negation for signed 32 bits
          number: 0xFFFFFFFFFFFFFFF = bitwise negation for signed 64 bits
        or: = Magic constants used in the implementation of strings functions.
          number: 0x7EFEFEFF = optimized string constant for 32 bits
          number: 0x81010101 = -0x81010101 = 0x7EFEFEFF
          number: 0x81010100 = 0x81010100 = ~0x7EFEFEFF
          number: 0x7EFEFEFEFEFEFEFF = optimized string constant for 64 bits
          number: 0x8101010101010101 = -0x8101010101010101 = 0x7EFEFEFEFEFEFEFF
          number: 0x8101010101010100 = 0x8101010101010100 = ~0x7EFEFEFEFEFEFEFF
basic block @ 0x43F599 in function 0x43F4E5
  and:
    characteristic: tight loop @ 0x43F599
    characteristic: nzxor @ 0x43F5A1
    not: = filter for potential false positives
      or:
        or: = unsigned bitwise negation operation (~i)
          number: 0xFFFFFFFF = bitwise negation for unsigned 32 bits
          number: 0xFFFFFFFFFFFFFFFF = bitwise negation for unsigned 64 bits
        or: = signed bitwise negation operation (~i)
          number: 0xFFFFFFF = bitwise negation for signed 32 bits
          number: 0xFFFFFFFFFFFFFFF = bitwise negation for signed 64 bits
        or: = Magic constants used in the implementation of strings functions.
          number: 0x7EFEFEFF = optimized string constant for 32 bits
          number: 0x81010101 = -0x81010101 = 0x7EFEFEFF
          number: 0x81010100 = 0x81010100 = ~0x7EFEFEFF
          number: 0x7EFEFEFEFEFEFEFF = optimized string constant for 64 bits
          number: 0x8101010101010101 = -0x8101010101010101 = 0x7EFEFEFEFEFEFEFF
          number: 0x8101010101010100 = 0x8101010101010100 = ~0x7EFEFEFEFEFEFEFF
basic block @ 0x43F9CD in function 0x43F916
  and:
    characteristic: tight loop @ 0x43F9CD
    characteristic: nzxor @ 0x43F9CF, 0x43F9D3, 0x43FA05, 0x43FA09, and 4 more...
    not: = filter for potential false positives
      or:
        or: = unsigned bitwise negation operation (~i)
          number: 0xFFFFFFFF = bitwise negation for unsigned 32 bits
          number: 0xFFFFFFFFFFFFFFFF = bitwise negation for unsigned 64 bits
        or: = signed bitwise negation operation (~i)
          number: 0xFFFFFFF = bitwise negation for signed 32 bits
          number: 0xFFFFFFFFFFFFFFF = bitwise negation for signed 64 bits
        or: = Magic constants used in the implementation of strings functions.
          number: 0x7EFEFEFF = optimized string constant for 32 bits
          number: 0x81010101 = -0x81010101 = 0x7EFEFEFF
          number: 0x81010100 = 0x81010100 = ~0x7EFEFEFF
          number: 0x7EFEFEFEFEFEFEFF = optimized string constant for 64 bits
          number: 0x8101010101010101 = -0x8101010101010101 = 0x7EFEFEFEFEFEFEFF
          number: 0x8101010101010100 = 0x8101010101010100 = ~0x7EFEFEFEFEFEFEFF
basic block @ 0x43FA6D in function 0x43F916
  and:
    characteristic: tight loop @ 0x43FA6D
    characteristic: nzxor @ 0x43FA6F, 0x43FA73, 0x43FAA3, 0x43FAA7, and 4 more...
    not: = filter for potential false positives
      or:
        or: = unsigned bitwise negation operation (~i)
          number: 0xFFFFFFFF = bitwise negation for unsigned 32 bits
          number: 0xFFFFFFFFFFFFFFFF = bitwise negation for unsigned 64 bits
        or: = signed bitwise negation operation (~i)
          number: 0xFFFFFFF = bitwise negation for signed 32 bits
          number: 0xFFFFFFFFFFFFFFF = bitwise negation for signed 64 bits
        or: = Magic constants used in the implementation of strings functions.
          number: 0x7EFEFEFF = optimized string constant for 32 bits
          number: 0x81010101 = -0x81010101 = 0x7EFEFEFF
          number: 0x81010100 = 0x81010100 = ~0x7EFEFEFF
          number: 0x7EFEFEFEFEFEFEFF = optimized string constant for 64 bits
          number: 0x8101010101010101 = -0x8101010101010101 = 0x7EFEFEFEFEFEFEFF
          number: 0x8101010101010100 = 0x8101010101010100 = ~0x7EFEFEFEFEFEFEFF
basic block @ 0x43FB0B in function 0x43F916
  and:
    characteristic: tight loop @ 0x43FB0B
    characteristic: nzxor @ 0x43FB0D, 0x43FB13, 0x43FB4D, 0x43FB57, and 2 more...
    not: = filter for potential false positives
      or:
        or: = unsigned bitwise negation operation (~i)
          number: 0xFFFFFFFF = bitwise negation for unsigned 32 bits
          number: 0xFFFFFFFFFFFFFFFF = bitwise negation for unsigned 64 bits
        or: = signed bitwise negation operation (~i)
          number: 0xFFFFFFF = bitwise negation for signed 32 bits
          number: 0xFFFFFFFFFFFFFFF = bitwise negation for signed 64 bits
        or: = Magic constants used in the implementation of strings functions.
          number: 0x7EFEFEFF = optimized string constant for 32 bits
          number: 0x81010101 = -0x81010101 = 0x7EFEFEFF
          number: 0x81010100 = 0x81010100 = ~0x7EFEFEFF
          number: 0x7EFEFEFEFEFEFEFF = optimized string constant for 64 bits
          number: 0x8101010101010101 = -0x8101010101010101 = 0x7EFEFEFEFEFEFEFF
          number: 0x8101010101010100 = 0x8101010101010100 = ~0x7EFEFEFEFEFEFEFF
basic block @ 0x43FBA5 in function 0x43F916
  and:
    characteristic: tight loop @ 0x43FBA5
    characteristic: nzxor @ 0x43FBAB, 0x43FBE1, 0x43FC05, 0x43FC29
    not: = filter for potential false positives
      or:
        or: = unsigned bitwise negation operation (~i)
          number: 0xFFFFFFFF = bitwise negation for unsigned 32 bits
          number: 0xFFFFFFFFFFFFFFFF = bitwise negation for unsigned 64 bits
        or: = signed bitwise negation operation (~i)
          number: 0xFFFFFFF = bitwise negation for signed 32 bits
          number: 0xFFFFFFFFFFFFFFF = bitwise negation for signed 64 bits
        or: = Magic constants used in the implementation of strings functions.
          number: 0x7EFEFEFF = optimized string constant for 32 bits
          number: 0x81010101 = -0x81010101 = 0x7EFEFEFF
          number: 0x81010100 = 0x81010100 = ~0x7EFEFEFF
          number: 0x7EFEFEFEFEFEFEFF = optimized string constant for 64 bits
          number: 0x8101010101010101 = -0x8101010101010101 = 0x7EFEFEFEFEFEFEFF
          number: 0x8101010101010100 = 0x8101010101010100 = ~0x7EFEFEFEFEFEFEFF
basic block @ 0x443A94 in function 0x44394A
  and:
    characteristic: tight loop @ 0x443A94
    characteristic: nzxor @ 0x443AAB
    not: = filter for potential false positives
      or:
        or: = unsigned bitwise negation operation (~i)
          number: 0xFFFFFFFF = bitwise negation for unsigned 32 bits
          number: 0xFFFFFFFFFFFFFFFF = bitwise negation for unsigned 64 bits
        or: = signed bitwise negation operation (~i)
          number: 0xFFFFFFF = bitwise negation for signed 32 bits
          number: 0xFFFFFFFFFFFFFFF = bitwise negation for signed 64 bits
        or: = Magic constants used in the implementation of strings functions.
          number: 0x7EFEFEFF = optimized string constant for 32 bits
          number: 0x81010101 = -0x81010101 = 0x7EFEFEFF
          number: 0x81010100 = 0x81010100 = ~0x7EFEFEFF
          number: 0x7EFEFEFEFEFEFEFF = optimized string constant for 64 bits
          number: 0x8101010101010101 = -0x8101010101010101 = 0x7EFEFEFEFEFEFEFF
          number: 0x8101010101010100 = 0x8101010101010100 = ~0x7EFEFEFEFEFEFEFF
basic block @ 0x443EA6 in function 0x443DDD
  and:
    characteristic: tight loop @ 0x443EA6
    characteristic: nzxor @ 0x443EAA
    not: = filter for potential false positives
      or:
        or: = unsigned bitwise negation operation (~i)
          number: 0xFFFFFFFF = bitwise negation for unsigned 32 bits
          number: 0xFFFFFFFFFFFFFFFF = bitwise negation for unsigned 64 bits
        or: = signed bitwise negation operation (~i)
          number: 0xFFFFFFF = bitwise negation for signed 32 bits
          number: 0xFFFFFFFFFFFFFFF = bitwise negation for signed 64 bits
        or: = Magic constants used in the implementation of strings functions.
          number: 0x7EFEFEFF = optimized string constant for 32 bits
          number: 0x81010101 = -0x81010101 = 0x7EFEFEFF
          number: 0x81010100 = 0x81010100 = ~0x7EFEFEFF
          number: 0x7EFEFEFEFEFEFEFF = optimized string constant for 64 bits
          number: 0x8101010101010101 = -0x8101010101010101 = 0x7EFEFEFEFEFEFEFF
          number: 0x8101010101010100 = 0x8101010101010100 = ~0x7EFEFEFEFEFEFEFF
basic block @ 0x444400 in function 0x444350
  and:
    characteristic: tight loop @ 0x444400
    characteristic: nzxor @ 0x444412, 0x444417, 0x444423, 0x44442A
    not: = filter for potential false positives
      or:
        or: = unsigned bitwise negation operation (~i)
          number: 0xFFFFFFFF = bitwise negation for unsigned 32 bits
          number: 0xFFFFFFFFFFFFFFFF = bitwise negation for unsigned 64 bits
        or: = signed bitwise negation operation (~i)
          number: 0xFFFFFFF = bitwise negation for signed 32 bits
          number: 0xFFFFFFFFFFFFFFF = bitwise negation for signed 64 bits
        or: = Magic constants used in the implementation of strings functions.
          number: 0x7EFEFEFF = optimized string constant for 32 bits
          number: 0x81010101 = -0x81010101 = 0x7EFEFEFF
          number: 0x81010100 = 0x81010100 = ~0x7EFEFEFF
          number: 0x7EFEFEFEFEFEFEFF = optimized string constant for 64 bits
          number: 0x8101010101010101 = -0x8101010101010101 = 0x7EFEFEFEFEFEFEFF
          number: 0x8101010101010100 = 0x8101010101010100 = ~0x7EFEFEFEFEFEFEFF
basic block @ 0x444ED0 in function 0x444E00
  and:
    characteristic: tight loop @ 0x444ED0
    characteristic: nzxor @ 0x444F06, 0x444F16, 0x444F22, 0x444F2D, and 4 more...
    not: = filter for potential false positives
      or:
        or: = unsigned bitwise negation operation (~i)
          number: 0xFFFFFFFF = bitwise negation for unsigned 32 bits
          number: 0xFFFFFFFFFFFFFFFF = bitwise negation for unsigned 64 bits
        or: = signed bitwise negation operation (~i)
          number: 0xFFFFFFF = bitwise negation for signed 32 bits
          number: 0xFFFFFFFFFFFFFFF = bitwise negation for signed 64 bits
        or: = Magic constants used in the implementation of strings functions.
          number: 0x7EFEFEFF = optimized string constant for 32 bits
          number: 0x81010101 = -0x81010101 = 0x7EFEFEFF
          number: 0x81010100 = 0x81010100 = ~0x7EFEFEFF
          number: 0x7EFEFEFEFEFEFEFF = optimized string constant for 64 bits
          number: 0x8101010101010101 = -0x8101010101010101 = 0x7EFEFEFEFEFEFEFF
          number: 0x8101010101010100 = 0x8101010101010100 = ~0x7EFEFEFEFEFEFEFF
basic block @ 0x445DC6 in function 0x445D21
  and:
    characteristic: tight loop @ 0x445DC6
    characteristic: nzxor @ 0x445DCA, 0x445DCE, 0x445DD2
    not: = filter for potential false positives
      or:
        or: = unsigned bitwise negation operation (~i)
          number: 0xFFFFFFFF = bitwise negation for unsigned 32 bits
          number: 0xFFFFFFFFFFFFFFFF = bitwise negation for unsigned 64 bits
        or: = signed bitwise negation operation (~i)
          number: 0xFFFFFFF = bitwise negation for signed 32 bits
          number: 0xFFFFFFFFFFFFFFF = bitwise negation for signed 64 bits
        or: = Magic constants used in the implementation of strings functions.
          number: 0x7EFEFEFF = optimized string constant for 32 bits
          number: 0x81010101 = -0x81010101 = 0x7EFEFEFF
          number: 0x81010100 = 0x81010100 = ~0x7EFEFEFF
          number: 0x7EFEFEFEFEFEFEFF = optimized string constant for 64 bits
          number: 0x8101010101010101 = -0x8101010101010101 = 0x7EFEFEFEFEFEFEFF
          number: 0x8101010101010100 = 0x8101010101010100 = ~0x7EFEFEFEFEFEFEFF
basic block @ 0x445E10 in function 0x445D21
  and:
    characteristic: tight loop @ 0x445E10
    characteristic: nzxor @ 0x445E1C, 0x445E20, 0x445E34, 0x445E38, and 6 more...
    not: = filter for potential false positives
      or:
        or: = unsigned bitwise negation operation (~i)
          number: 0xFFFFFFFF = bitwise negation for unsigned 32 bits
          number: 0xFFFFFFFFFFFFFFFF = bitwise negation for unsigned 64 bits
        or: = signed bitwise negation operation (~i)
          number: 0xFFFFFFF = bitwise negation for signed 32 bits
          number: 0xFFFFFFFFFFFFFFF = bitwise negation for signed 64 bits
        or: = Magic constants used in the implementation of strings functions.
          number: 0x7EFEFEFF = optimized string constant for 32 bits
          number: 0x81010101 = -0x81010101 = 0x7EFEFEFF
          number: 0x81010100 = 0x81010100 = ~0x7EFEFEFF
          number: 0x7EFEFEFEFEFEFEFF = optimized string constant for 64 bits
          number: 0x8101010101010101 = -0x8101010101010101 = 0x7EFEFEFEFEFEFEFF
          number: 0x8101010101010100 = 0x8101010101010100 = ~0x7EFEFEFEFEFEFEFF
basic block @ 0x445ED2 in function 0x445D21
  and:
    characteristic: tight loop @ 0x445ED2
    characteristic: nzxor @ 0x445EDC, 0x445EDE, 0x445EF4, 0x445EF6, and 6 more...
    not: = filter for potential false positives
      or:
        or: = unsigned bitwise negation operation (~i)
          number: 0xFFFFFFFF = bitwise negation for unsigned 32 bits
          number: 0xFFFFFFFFFFFFFFFF = bitwise negation for unsigned 64 bits
        or: = signed bitwise negation operation (~i)
          number: 0xFFFFFFF = bitwise negation for signed 32 bits
          number: 0xFFFFFFFFFFFFFFF = bitwise negation for signed 64 bits
        or: = Magic constants used in the implementation of strings functions.
          number: 0x7EFEFEFF = optimized string constant for 32 bits
          number: 0x81010101 = -0x81010101 = 0x7EFEFEFF
          number: 0x81010100 = 0x81010100 = ~0x7EFEFEFF
          number: 0x7EFEFEFEFEFEFEFF = optimized string constant for 64 bits
          number: 0x8101010101010101 = -0x8101010101010101 = 0x7EFEFEFEFEFEFEFF
          number: 0x8101010101010100 = 0x8101010101010100 = ~0x7EFEFEFEFEFEFEFF
basic block @ 0x446090 in function 0x445D21
  and:
    characteristic: tight loop @ 0x446090
    characteristic: nzxor @ 0x44609E, 0x4460A0, 0x4460B7, 0x4460B9, and 6 more...
    not: = filter for potential false positives
      or:
        or: = unsigned bitwise negation operation (~i)
          number: 0xFFFFFFFF = bitwise negation for unsigned 32 bits
          number: 0xFFFFFFFFFFFFFFFF = bitwise negation for unsigned 64 bits
        or: = signed bitwise negation operation (~i)
          number: 0xFFFFFFF = bitwise negation for signed 32 bits
          number: 0xFFFFFFFFFFFFFFF = bitwise negation for signed 64 bits
        or: = Magic constants used in the implementation of strings functions.
          number: 0x7EFEFEFF = optimized string constant for 32 bits
          number: 0x81010101 = -0x81010101 = 0x7EFEFEFF
          number: 0x81010100 = 0x81010100 = ~0x7EFEFEFF
          number: 0x7EFEFEFEFEFEFEFF = optimized string constant for 64 bits
          number: 0x8101010101010101 = -0x8101010101010101 = 0x7EFEFEFEFEFEFEFF
          number: 0x8101010101010100 = 0x8101010101010100 = ~0x7EFEFEFEFEFEFEFF
basic block @ 0x4466A6 in function 0x4465F2
  and:
    characteristic: tight loop @ 0x4466A6
    characteristic: nzxor @ 0x4466AC, 0x4466AF, 0x4466B2, 0x4466B5, and 4 more...
    not: = filter for potential false positives
      or:
        or: = unsigned bitwise negation operation (~i)
          number: 0xFFFFFFFF = bitwise negation for unsigned 32 bits
          number: 0xFFFFFFFFFFFFFFFF = bitwise negation for unsigned 64 bits
        or: = signed bitwise negation operation (~i)
          number: 0xFFFFFFF = bitwise negation for signed 32 bits
          number: 0xFFFFFFFFFFFFFFF = bitwise negation for signed 64 bits
        or: = Magic constants used in the implementation of strings functions.
          number: 0x7EFEFEFF = optimized string constant for 32 bits
          number: 0x81010101 = -0x81010101 = 0x7EFEFEFF
          number: 0x81010100 = 0x81010100 = ~0x7EFEFEFF
          number: 0x7EFEFEFEFEFEFEFF = optimized string constant for 64 bits
          number: 0x8101010101010101 = -0x8101010101010101 = 0x7EFEFEFEFEFEFEFF
          number: 0x8101010101010100 = 0x8101010101010100 = ~0x7EFEFEFEFEFEFEFF
basic block @ 0x446726 in function 0x4465F2
  and:
    characteristic: tight loop @ 0x446726
    characteristic: nzxor @ 0x446726, 0x446729
    not: = filter for potential false positives
      or:
        or: = unsigned bitwise negation operation (~i)
          number: 0xFFFFFFFF = bitwise negation for unsigned 32 bits
          number: 0xFFFFFFFFFFFFFFFF = bitwise negation for unsigned 64 bits
        or: = signed bitwise negation operation (~i)
          number: 0xFFFFFFF = bitwise negation for signed 32 bits
          number: 0xFFFFFFFFFFFFFFF = bitwise negation for signed 64 bits
        or: = Magic constants used in the implementation of strings functions.
          number: 0x7EFEFEFF = optimized string constant for 32 bits
          number: 0x81010101 = -0x81010101 = 0x7EFEFEFF
          number: 0x81010100 = 0x81010100 = ~0x7EFEFEFF
          number: 0x7EFEFEFEFEFEFEFF = optimized string constant for 64 bits
          number: 0x8101010101010101 = -0x8101010101010101 = 0x7EFEFEFEFEFEFEFF
          number: 0x8101010101010100 = 0x8101010101010100 = ~0x7EFEFEFEFEFEFEFF
basic block @ 0x446896 in function 0x4465F2
  and:
    characteristic: tight loop @ 0x446896
    characteristic: nzxor @ 0x4468B2, 0x4468B6
    not: = filter for potential false positives
      or:
        or: = unsigned bitwise negation operation (~i)
          number: 0xFFFFFFFF = bitwise negation for unsigned 32 bits
          number: 0xFFFFFFFFFFFFFFFF = bitwise negation for unsigned 64 bits
        or: = signed bitwise negation operation (~i)
          number: 0xFFFFFFF = bitwise negation for signed 32 bits
          number: 0xFFFFFFFFFFFFFFF = bitwise negation for signed 64 bits
        or: = Magic constants used in the implementation of strings functions.
          number: 0x7EFEFEFF = optimized string constant for 32 bits
          number: 0x81010101 = -0x81010101 = 0x7EFEFEFF
          number: 0x81010100 = 0x81010100 = ~0x7EFEFEFF
          number: 0x7EFEFEFEFEFEFEFF = optimized string constant for 64 bits
          number: 0x8101010101010101 = -0x8101010101010101 = 0x7EFEFEFEFEFEFEFF
          number: 0x8101010101010100 = 0x8101010101010100 = ~0x7EFEFEFEFEFEFEFF
basic block @ 0x45B63E in function 0x45B627
  and:
    characteristic: tight loop @ 0x45B63E
    characteristic: nzxor @ 0x45B641
    not: = filter for potential false positives
      or:
        or: = unsigned bitwise negation operation (~i)
          number: 0xFFFFFFFF = bitwise negation for unsigned 32 bits
          number: 0xFFFFFFFFFFFFFFFF = bitwise negation for unsigned 64 bits
        or: = signed bitwise negation operation (~i)
          number: 0xFFFFFFF = bitwise negation for signed 32 bits
          number: 0xFFFFFFFFFFFFFFF = bitwise negation for signed 64 bits
        or: = Magic constants used in the implementation of strings functions.
          number: 0x7EFEFEFF = optimized string constant for 32 bits
          number: 0x81010101 = -0x81010101 = 0x7EFEFEFF
          number: 0x81010100 = 0x81010100 = ~0x7EFEFEFF
          number: 0x7EFEFEFEFEFEFEFF = optimized string constant for 64 bits
          number: 0x8101010101010101 = -0x8101010101010101 = 0x7EFEFEFEFEFEFEFF
          number: 0x8101010101010100 = 0x8101010101010100 = ~0x7EFEFEFEFEFEFEFF
basic block @ 0x4687EB in function 0x468778
  and:
    characteristic: tight loop @ 0x4687EB
    characteristic: nzxor @ 0x46880A
    not: = filter for potential false positives
      or:
        or: = unsigned bitwise negation operation (~i)
          number: 0xFFFFFFFF = bitwise negation for unsigned 32 bits
          number: 0xFFFFFFFFFFFFFFFF = bitwise negation for unsigned 64 bits
        or: = signed bitwise negation operation (~i)
          number: 0xFFFFFFF = bitwise negation for signed 32 bits
          number: 0xFFFFFFFFFFFFFFF = bitwise negation for signed 64 bits
        or: = Magic constants used in the implementation of strings functions.
          number: 0x7EFEFEFF = optimized string constant for 32 bits
          number: 0x81010101 = -0x81010101 = 0x7EFEFEFF
          number: 0x81010100 = 0x81010100 = ~0x7EFEFEFF
          number: 0x7EFEFEFEFEFEFEFF = optimized string constant for 64 bits
          number: 0x8101010101010101 = -0x8101010101010101 = 0x7EFEFEFEFEFEFEFF
          number: 0x8101010101010100 = 0x8101010101010100 = ~0x7EFEFEFEFEFEFEFF
basic block @ 0x468915 in function 0x468778
  and:
    characteristic: tight loop @ 0x468915
    characteristic: nzxor @ 0x468915
    not: = filter for potential false positives
      or:
        or: = unsigned bitwise negation operation (~i)
          number: 0xFFFFFFFF = bitwise negation for unsigned 32 bits
          number: 0xFFFFFFFFFFFFFFFF = bitwise negation for unsigned 64 bits
        or: = signed bitwise negation operation (~i)
          number: 0xFFFFFFF = bitwise negation for signed 32 bits
          number: 0xFFFFFFFFFFFFFFF = bitwise negation for signed 64 bits
        or: = Magic constants used in the implementation of strings functions.
          number: 0x7EFEFEFF = optimized string constant for 32 bits
          number: 0x81010101 = -0x81010101 = 0x7EFEFEFF
          number: 0x81010100 = 0x81010100 = ~0x7EFEFEFF
          number: 0x7EFEFEFEFEFEFEFF = optimized string constant for 64 bits
          number: 0x8101010101010101 = -0x8101010101010101 = 0x7EFEFEFEFEFEFEFF
          number: 0x8101010101010100 = 0x8101010101010100 = ~0x7EFEFEFEFEFEFEFF
basic block @ 0x47220F in function 0x47208A
  and:
    characteristic: tight loop @ 0x47220F
    characteristic: nzxor @ 0x472211
    not: = filter for potential false positives
      or:
        or: = unsigned bitwise negation operation (~i)
          number: 0xFFFFFFFF = bitwise negation for unsigned 32 bits
          number: 0xFFFFFFFFFFFFFFFF = bitwise negation for unsigned 64 bits
        or: = signed bitwise negation operation (~i)
          number: 0xFFFFFFF = bitwise negation for signed 32 bits
          number: 0xFFFFFFFFFFFFFFF = bitwise negation for signed 64 bits
        or: = Magic constants used in the implementation of strings functions.
          number: 0x7EFEFEFF = optimized string constant for 32 bits
          number: 0x81010101 = -0x81010101 = 0x7EFEFEFF
          number: 0x81010100 = 0x81010100 = ~0x7EFEFEFF
          number: 0x7EFEFEFEFEFEFEFF = optimized string constant for 64 bits
          number: 0x8101010101010101 = -0x8101010101010101 = 0x7EFEFEFEFEFEFEFF
          number: 0x8101010101010100 = 0x8101010101010100 = ~0x7EFEFEFEFEFEFEFF

decrypt data using AES via x86 extensions (3 matches)
namespace  data-manipulation/encryption/aes
author     moritz.raabe@mandiant.com
scope      function
att&ck     Defense Evasion::Deobfuscate/Decode Files or Information [T1140]
mbc        Cryptography::Decrypt Data::AES [C0031.001]
examples   66602B5FAB602CB4E6F754748D249542:0x4097D0
function @ 0x431063
  or:
    mnemonic: aesdec = Perform One Round of an AES Decryption Flow @ 0x43108E, 0x431097, 0x4310A0, 0x4310A9, and 5 more...
    mnemonic: aesdeclast = Perform Last Round of an AES Decryption Flow @ 0x4310DC
function @ 0x43131C
  or:
    mnemonic: aesdec = Perform One Round of an AES Decryption Flow @ 0x431347, 0x431350, 0x431359, 0x431362, and 7 more...
    mnemonic: aesdeclast = Perform Last Round of an AES Decryption Flow @ 0x4313A1
function @ 0x43156A
  or:
    mnemonic: aesdec = Perform One Round of an AES Decryption Flow @ 0x431595, 0x43159E, 0x4315A7, 0x4315B0, and 9 more...
    mnemonic: aesdeclast = Perform Last Round of an AES Decryption Flow @ 0x4315FB

encrypt data using AES via x86 extensions (7 matches)
namespace  data-manipulation/encryption/aes
author     moritz.raabe@mandiant.com
scope      function
att&ck     Defense Evasion::Obfuscated Files or Information [T1027]
mbc        Defense Evasion::Obfuscated Files or Information::Encryption-Standard Algorithm [E1027.m05], Cryptography::Encrypt Data::AES [C0027.001]
function @ 0x430FC9
  or:
    mnemonic: aesenc = Perform One Round of an AES Encryption Flow @ 0x430FF4, 0x430FFD, 0x431006, 0x43100F, and 5 more...
    mnemonic: aesenclast = Perform Last Round of an AES Encryption Flow @ 0x431045
function @ 0x43119A
  or:
    mnemonic: aesenc = Perform One Round of an AES Encryption Flow @ 0x4311D6, 0x4311DF, 0x4311E8, 0x4311F1, and 5 more...
    mnemonic: aesenclast = Perform Last Round of an AES Encryption Flow @ 0x431227
function @ 0x43126C
  or:
    mnemonic: aesenc = Perform One Round of an AES Encryption Flow @ 0x431297, 0x4312A0, 0x4312A9, 0x4312B2, and 7 more...
    mnemonic: aesenclast = Perform Last Round of an AES Encryption Flow @ 0x4312FA
function @ 0x4313C4
  or:
    mnemonic: aesenc = Perform One Round of an AES Encryption Flow @ 0x431400, 0x431409, 0x431412, 0x43141B, and 7 more...
    mnemonic: aesenclast = Perform Last Round of an AES Encryption Flow @ 0x431463
function @ 0x4314A8
  or:
    mnemonic: aesenc = Perform One Round of an AES Encryption Flow @ 0x4314D3, 0x4314DC, 0x4314E5, 0x4314EE, and 9 more...
    mnemonic: aesenclast = Perform Last Round of an AES Encryption Flow @ 0x431548
function @ 0x43161E
  or:
    mnemonic: aesenc = Perform One Round of an AES Encryption Flow @ 0x43165A, 0x431663, 0x43166C, 0x431675, and 9 more...
    mnemonic: aesenclast = Perform Last Round of an AES Encryption Flow @ 0x4316CF
function @ 0x435227
  or:
    mnemonic: aesimc = Perform the AES InvMixColumn Transformation @ 0x435354
    mnemonic: aeskeygenassist = AES Round Key Generation Assist @ 0x43529D, 0x4352D8

encrypt data using blowfish (2 matches)
namespace  data-manipulation/encryption/blowfish
author     @_re_fox
scope      basic block
att&ck     Defense Evasion::Obfuscated Files or Information [T1027]
mbc        Defense Evasion::Obfuscated Files or Information::Encryption-Standard Algorithm [E1027.m05], Cryptography::Encrypt Data::Blowfish [C0027.002]
examples   0761142efbda6c4b1e801223de723578:0x653E19E5
basic block @ 0x436FA3 in function 0x436E30
  or:
    or:
      bytes: 88 6A 3F 24 D3 08 A3 85 2E 8A 19 13 44 73 70 03 22 38 09 A4 D0 31 9F 29 98 FA 2E 08 89 6C 4E EC E6 21 28 45 77 13 D0 38 CF 66 54 BE 6C 0C E9 34 B7 29 AC C0 DD 50 7C C9 B5 D5 84 3F 17 09 47 B5 D9 D5 16 92 1B FB 79 89 = ps @ 0x436FBF
basic block @ 0x438035 in function 0x438035
  or:
    or:
      bytes: 88 6A 3F 24 D3 08 A3 85 2E 8A 19 13 44 73 70 03 22 38 09 A4 D0 31 9F 29 98 FA 2E 08 89 6C 4E EC E6 21 28 45 77 13 D0 38 CF 66 54 BE 6C 0C E9 34 B7 29 AC C0 DD 50 7C C9 B5 D5 84 3F 17 09 47 B5 D9 D5 16 92 1B FB 79 89 = ps @ 0x438055
      bytesks0 sbox1 @ 0x438062
      bytes: E9 70 7A 4B 44 29 B3 B5 2E 09 75 DB 23 26 19 C4 B0 A6 6E AD 7D DF A7 49 B8 60 EE 9C 66 B2 ED 8F 71 8C AA EC FF 17 9A 69 6C 52 64 56 E1 9E B1 C2 A5 02 36 19 29 4C 09 75 40 13 59 A0 3E 3A 18 E4 9A 98 54 3F 65 9D 42 5B D6 E4 8F 6B D6 3F F7 99 07 9C D2 A1 F5 30 E8 EF E6 38 2D 4D C1 5D 25 F0 86 20 DD 4C 26 EB 70 84 C6 E9 82 63 5E CC 1E 02 3F 6B 68 09 C9 EF BA 3E 14 18 97 3C A1 70 6A 6B 84 35 7F 68 86 E2 A0 52 05 53 9C B7 37 07 50 AA 1C 84 07 3E 5C AE DE 7F EC 44 7D 8E B8 F2 16 57 37 DA 3A B0 0D 0C 50 F0 04 1F 1C = ks1 sbox2 @ 0x438077
      bytes: 68 5A 3D E9 F7 40 81 94 1C 26 4C F6 34 29 69 94 F7 20 15 41 F7 D4 02 76 2E 6B F4 BC 68 00 A2 D4 71 24 08 D4 6A F4 20 33 B7 D4 B7 43 AF 61 00 50 2E F6 39 1E 46 45 24 97 74 4F 21 14 40 88 8B BF 1D FC 95 4D AF 91 B5 96 D3 DD F4 70 45 2F A0 66 EC 09 BC BF 85 97 BD 03 D0 6D AC 7F 04 85 CB 31 B3 27 EB 96 41 39 FD 55 E6 47 25 DA 9A 0A CA AB 25 78 50 28 F4 29 04 53 DA 86 2C 0A FB 6D B6 E9 62 14 DC 68 00 69 48 D7 A4 C0 0E 68 EE 8D A1 27 A2 FE 3F 4F 8C AD 87 E8 06 E0 8C B5 B6 D6 F4 7A 7C 1E CE AA EC 5F 37 D3 99 A3 78 = ks2 sbox3 @ 0x43808C
      bytesks3 sbox4 @ 0x4380A1

encrypt data using RC4 PRGA
namespace  data-manipulation/encryption/rc4
author     moritz.raabe@mandiant.com
scope      function
att&ck     Defense Evasion::Obfuscated Files or Information [T1027]
mbc        Cryptography::Encrypt Data::RC4 [C0027.009], Cryptography::Generate Pseudo-random Sequence::RC4 PRGA [C0021.004]
examples   34404A3FB9804977C6AB86CB991FB130:0x403DB0, 34404A3FB9804977C6AB86CB991FB130:0x403E50, 9324D1A8AE37A36AE560C37448C9705A:0x4049F0, 73CE04892E5F39EC82B00C02FC04C70F:0x4064C6
function @ 0x4354E7
  and:
    match: contain loop @ 0x4354E7
      or:
        characteristic: tight loop @ 0x43550A
    count(characteristic(nzxor)): 1 @ 0x435539
    count(characteristic(calls from)): 4 or fewer
    count(basicblock): 4 or more @ 0x4354E7, 0x435500, 0x43550A, 0x43554B
    or:
      count(mnemonic(movzx)): 4 or more @ 0x43550C, 0x43550F, 0x435516, 0x43552B, and 1 more...

hash data using murmur3
namespace   data-manipulation/hashing/murmur
author      william.ballenthin@mandiant.com
scope       function
mbc         Data::Non-Cryptographic Hash::MurmurHash [C0030.001]
references  https://github.com/aappleby/smhasher/blob/master/src/MurmurHash3.cpp
examples    c66172b12971a329f8d5ff01665f204b:0x404A18
function @ 0x444350
  or:
    and:
      subscope:
        and: = k ROL r1
          mnemonic: rol @ 0x444406, 0x44440F, 0x44441B, 0x444420
          number: 0xF = r1 @ 0x444406
      subscope:
        and: = hash ROL r2
          mnemonic: rol @ 0x444406, 0x44440F, 0x44441B, 0x444420
          number: 0xD = r2 @ 0x44440F

hash data using SHA256
namespace  data-manipulation/hashing/sha256
author     moritz.raabe@mandiant.com
scope      function
mbc        Cryptography::Cryptographic Hash::SHA256 [C0029.003]
examples   C0CFFCF211035A839E28D542DE300298:0x180011400, 6CC148363200798A12091B97A17181A1:0x140120240
function @ 0x436E30
  and:
    number: 0x6A09E667 @ 0x436F78
    number: 0xBB67AE85 @ 0x436F68
    number: 0x3C6EF372 @ 0x436F58
    number: 0xA54FF53A @ 0x436F35
    number: 0x510E527F @ 0x436EB0
    number: 0x9B05688C @ 0x436EBE
    number: 0x1F83D9AB @ 0x436ED6
    number: 0x5BE0CD19 @ 0x436F48

authenticate HMAC
namespace   data-manipulation/hmac
author      moritz.raabe@mandiant.com
scope       function
mbc         Cryptography::Hashed Message Authentication Code [C0061]
references  https://tools.ietf.org/html/rfc2104, https://tools.ietf.org/html/rfc4634, https://github.com/ogay/hmac
examples    mimikatz.exe_:0x403408
function @ 0x43F4E5
  and:
    number: 0x36 = inner padding byte value @ 0x43F5A1, 0x43F5BA
    number: 0x5C = outer padding byte value @ 0x43F550, 0x43F571
    match: contain loop @ 0x43F4E5
      or:
        characteristic: loop @ 0x43F4E5
        characteristic: tight loop @ 0x43F548, 0x43F56E, 0x43F599
    count(characteristic(nzxor)): 2 or more @ 0x43F550, 0x43F5A1

debug build
namespace  executable/pe/debug
author     william.ballenthin@mandiant.com
scope      file
or:
  string: "Assertion failed!" @ 0xBC9EC

contain a resource (.rsrc) section
namespace  executable/pe/section/rsrc
author     moritz.raabe@mandiant.com
scope      file
examples   A933A1A402775CFA94B6BEE0963F4B46:0x41fd25
section: .rsrc @ 0x4C6000, 0x525000

extract resource via kernel32 functions
namespace  executable/resource
author     william.ballenthin@mandiant.com
scope      function
examples   BF88E1BD4A3BDE10B419A622278F1FF7:0x401000, Practical Malware Analysis Lab 01-04.exe_:0x4011FC, 563653399B82CD443F120ECEFF836EA3678D4CF11D9B351BB737573C2D856299:0x140001ABA
function @ 0x46BC9D
  or:
    and:
      or:
        api: kernel32.LoadResource @ 0x46BD13
        api: kernel32.LockResource @ 0x46BD1E
      optional:
        api: kernel32.SizeofResource @ 0x46BCFC

open clipboard (3 matches)
namespace  host-interaction/clipboard
author     michael.hunhoff@mandiant.com
scope      function
att&ck     Collection::Clipboard Data [T1115]
examples   6f99a2c8944cb02ff28c6f9ced59b161:0x403180
function @ 0x46695C
  and:
    api: user32.OpenClipboard @ 0x4669D1
    optional:
      api: user32.CloseClipboard @ 0x4669EA
function @ 0x467915
  and:
    api: user32.OpenClipboard @ 0x468352
    optional:
      api: user32.CloseClipboard @ 0x46838F
function @ 0x469DBE
  and:
    api: user32.OpenClipboard @ 0x469DC0
    optional:
      api: user32.CloseClipboard @ 0x469DFA

read clipboard data
namespace  host-interaction/clipboard
author     michael.hunhoff@mandiant.com
scope      function
att&ck     Collection::Clipboard Data [T1115]
examples   C91887D861D9BD4A5872249B641BC9F9:0x40156F, 93dfc146f60bd796eb28d4e4f348f2e4:0x401050
function @ 0x469DBE
  and:
    api: user32.GetClipboardData @ 0x469DCC, 0x469DDD
    optional:
      match: open clipboard @ 0x469DBE
        and:
          api: user32.OpenClipboard @ 0x469DC0
          optional:
            api: user32.CloseClipboard @ 0x469DFA

replace clipboard data (2 matches)
namespace  host-interaction/clipboard
author     michael.hunhoff@mandiant.com
scope      function
mbc        Impact::Clipboard Modification [E1510]
examples   6f99a2c8944cb02ff28c6f9ced59b161:0x403180
function @ 0x46695C
  and:
    match: write clipboard data @ 0x46695C
      and:
        api: user32.SetClipboardData @ 0x4669E4
        optional:
          match: open clipboard @ 0x46695C
            and:
              api: user32.OpenClipboard @ 0x4669D1
              optional:
                api: user32.CloseClipboard @ 0x4669EA
    api: user32.EmptyClipboard @ 0x4669DB
    optional:
      match: open clipboard @ 0x46695C
        and:
          api: user32.OpenClipboard @ 0x4669D1
          optional:
            api: user32.CloseClipboard @ 0x4669EA
function @ 0x467915
  and:
    match: write clipboard data @ 0x467915
      and:
        api: user32.SetClipboardData @ 0x46836E, 0x468376, 0x468389
        optional:
          match: open clipboard @ 0x467915
            and:
              api: user32.OpenClipboard @ 0x468352
              optional:
                api: user32.CloseClipboard @ 0x46838F
    api: user32.EmptyClipboard @ 0x46835C
    optional:
      match: open clipboard @ 0x467915
        and:
          api: user32.OpenClipboard @ 0x468352
          optional:
            api: user32.CloseClipboard @ 0x46838F

write clipboard data (2 matches)
namespace  host-interaction/clipboard
author     michael.hunhoff@mandiant.com
scope      function
mbc        Impact::Clipboard Modification [E1510]
examples   6F99A2C8944CB02FF28C6F9CED59B161:0x403180
function @ 0x46695C
  and:
    api: user32.SetClipboardData @ 0x4669E4
    optional:
      match: open clipboard @ 0x46695C
        and:
          api: user32.OpenClipboard @ 0x4669D1
          optional:
            api: user32.CloseClipboard @ 0x4669EA
function @ 0x467915
  and:
    api: user32.SetClipboardData @ 0x46836E, 0x468376, 0x468389
    optional:
      match: open clipboard @ 0x467915
        and:
          api: user32.OpenClipboard @ 0x468352
          optional:
            api: user32.CloseClipboard @ 0x46838F

query environment variable
namespace  host-interaction/environment-variable
author     michael.hunhoff@mandiant.com, @_re_fox
scope      function
att&ck     Discovery::System Information Discovery [T1082]
examples   Practical Malware Analysis Lab 14-02.exe_:0x401880, 0761142efbda6c4b1e801223de723578:0x65483490
function @ 0x47244F
  or:
    api: kernel32.GetEnvironmentVariable @ 0x4725FB, 0x47260A

get common file path (5 matches)
namespace  host-interaction/file-system
author     moritz.raabe@mandiant.com
scope      function
att&ck     Discovery::File and Directory Discovery [T1083]
examples   Practical Malware Analysis Lab 03-02.dll_:0x10003415, 972B219F18379907A045431303F4DA7D:0x404887
function @ 0x46BDEF
  or:
    api: kernel32.GetTempPath @ 0x46BE41
function @ 0x46CDE0
  or:
    api: kernel32.GetSystemDirectory @ 0x46CDF8, 0x46CE33
function @ 0x46F6FF
  or:
    api: kernel32.GetWindowsDirectory @ 0x46F728
function @ 0x47244F
  or:
    api: kernel32.GetWindowsDirectory @ 0x472678
function @ 0x473C8C
  or:
    api: GetCurrentDirectory @ 0x473CCD, 0x473D18

delete file (4 matches)
namespace  host-interaction/file-system/delete
author     moritz.raabe@mandiant.com
scope      function
mbc        File System::Delete File [C0047]
examples   946A99F36A46D335DEC080D9A4371940:0x100015F0, 31600AD0D1A7EA615690DF111AE36C73:0x401A15, 563653399B82CD443F120ECEFF836EA3678D4CF11D9B351BB737573C2D856299:0x140001E04
function @ 0x46BD80
  or:
    api: kernel32.DeleteFile @ 0x46BDB1
function @ 0x46BDEF
  or:
    api: kernel32.DeleteFile @ 0x46BFCE
function @ 0x46BFF2
  or:
    api: kernel32.DeleteFile @ 0x46C027
function @ 0x472B6F
  or:
    api: kernel32.DeleteFile @ 0x472BBC

check if file exists
namespace  host-interaction/file-system/exists
author     moritz.raabe@mandiant.com
scope      function
att&ck     Discovery::File and Directory Discovery [T1083]
examples   31600AD0D1A7EA615690DF111AE36C73:0x401284
function @ 0x472B6F
  or:
    subscope:
      and:
        api: kernel32.GetLastError @ 0x472BC6
        mnemonic: cmp @ 0x472BCC
        number: 0x2 = ERROR_FILE_NOT_FOUND @ 0x472BCC

enumerate files via kernel32 functions
namespace  host-interaction/file-system/files/list
author     moritz.raabe@mandiant.com
scope      function
att&ck     Discovery::File and Directory Discovery [T1083]
examples   Practical Malware Analysis Lab 01-01.exe_:0x4011E0, Practical Malware Analysis Lab 20-02.exe_:0x401000
function @ 0x46F6FF
  and:
    or:
      api: kernel32.FindNextFile @ 0x46F76C
    optional:
      api: kernel32.FindClose @ 0x46F773
      match: contain loop @ 0x46F6FF
        or:
          characteristic: tight loop @ 0x46F75F
    or:
      api: kernel32.FindFirstFile @ 0x46F74C

read file on Windows (3 matches)
namespace  host-interaction/file-system/read
author     moritz.raabe@mandiant.com
scope      function
mbc        File System::Read File [C0051]
examples   BFB9B5391A13D0AFD787E87AB90F14F5:0x1314567B
function @ 0x46B4CF
  and:
    os: windows
    or:
      api: kernel32.ReadFile @ 0x46B54A
function @ 0x46FFFA
  and:
    os: windows
    or:
      api: kernel32.ReadFile @ 0x47021A
function @ 0x4723B8
  and:
    os: windows
    or:
      api: kernel32.ReadFile @ 0x4723EF, 0x472422

read file via mapping
namespace  host-interaction/file-system/read
author     michael.hunhoff@mandiant.com
scope      function
mbc        File System::Read File [C0051]
examples   Practical Malware Analysis Lab 01-01.exe_:0x401440
function @ 0x46203B
  and:
    subscope:
      and:
        api: kernel32.MapViewOfFile @ 0x462356
        or:
          number: 0x4 = FILE_MAP_READ @ 0x462350
    optional:
      api: kernel32.UnmapViewOfFile @ 0x46241D

write file on Windows (5 matches)
namespace  host-interaction/file-system/write
author     william.ballenthin@mandiant.com
scope      function
mbc        File System::Writes File [C0052]
examples   Practical Malware Analysis Lab 01-04.exe_:0x4011FC, 563653399B82CD443F120ECEFF836EA3678D4CF11D9B351BB737573C2D856299:0x1400025C4
function @ 0x40FE17
  and:
    os: windows
    or:
      api: _fwrite @ 0x40FE70
function @ 0x46B6F1
  and:
    os: windows
    or:
      api: kernel32.WriteFile @ 0x46B75D
function @ 0x46BDEF
  and:
    os: windows
    or:
      api: kernel32.WriteFile @ 0x46BF26
function @ 0x46FFFA
  and:
    os: windows
    or:
      api: kernel32.WriteFile @ 0x470076
function @ 0x4726D9
  and:
    os: windows
    or:
      api: kernel32.WriteFile @ 0x472707

find graphical window (4 matches)
namespace  host-interaction/gui/window/find
author     moritz.raabe@mandiant.com
scope      function
att&ck     Discovery::Application Window Discovery [T1010]
examples   7C843E75D4F02087B932FE280DF9C90C:0x41B180
function @ 0x4219D9
  or:
    api: user32.FindWindow @ 0x46FFA7
function @ 0x427E2B
  or:
    api: user32.FindWindow @ 0x46FFA7
function @ 0x46FF5D
  or:
    api: user32.FindWindow @ 0x46FFA7
function @ 0x46FFFA
  or:
    api: user32.FindWindow @ 0x470165

get graphical window text
namespace  host-interaction/gui/window/get-text
author     moritz.raabe@mandiant.com
scope      function
mbc        Discovery::Application Window Discovery::Window Text [E1010.m01]
examples   B7841B9D5DC1F511A93CC7576672EC0C:0x10007A50, Practical Malware Analysis Lab 11-03.dll_:0x10001000
function @ 0x41EDF6
  or:
    and:
      api: user32.GetWindowText @ 0x41EEBD

hide graphical window (2 matches)
namespace  host-interaction/gui/window/hide
author     michael.hunhoff@mandiant.com
scope      basic block
att&ck     Defense Evasion::Hide Artifacts::Hidden Window [T1564.003]
examples   39C05B15E9834AC93F206BC114D0A00C357C888DB567BA8F5345DA0529CBED41:0x10007250
basic block @ 0x461162 in function 0x461159
  and:
    number: 0x0 = SW_HIDE @ 0x461162
    api: user32.ShowWindow @ 0x461183
basic block @ 0x462A10 in function 0x46203B
  and:
    number: 0x0 = SW_HIDE @ 0x462A23
    api: user32.ShowWindow @ 0x462A3C

get keyboard layout (2 matches)
namespace  host-interaction/hardware/keyboard
author     michael.hunhoff@mandiant.com
scope      function
att&ck     Discovery::System Location Discovery::System Language Discovery [T1614.001]
examples   6F99A2C8944CB02FF28C6F9CED59B161:0x4193C0, C91887D861D9BD4A5872249B641BC9F9:0x4015FD
function @ 0x46203B
  and:
    or:
      api: user32.GetKeyboardLayout @ 0x462A25
function @ 0x462CF4
  and:
    optional:
      api: kernel32.GetLocaleInfo @ 0x463C72
    or:
      api: user32.GetKeyboardLayout @ 0x463128

get memory capacity
namespace  host-interaction/hardware/memory
author     moritz.raabe@mandiant.com
scope      function
att&ck     Discovery::System Information Discovery [T1082]
examples   9324D1A8AE37A36AE560C37448C9705A:0x4052A0
function @ 0x46F7D6
  or:
    api: kernel32.GlobalMemoryStatus @ 0x46F865

print debug messages
namespace  host-interaction/log/debug/write-event
author     michael.hunhoff@mandiant.com
scope      function
examples   493167E85E45363D09495D0841C30648:0x401000
function @ 0x48BBD0
  or:
    api: kernel32.OutputDebugString @ 0x48BBF9

check mutex and exit
namespace  host-interaction/mutex
author     @_re_fox, moritz.raabe@mandiant.com
scope      function
mbc        Process::Check Mutex [C0043], Process::Terminate Process [C0018]
examples   1d8fd13c890060464019c0f07b928b1a:0x402eb0, Practical Malware Analysis Lab 11-03.dll_:0x10001410
function @ 0x471674
  and:
    match: create mutex @ 0x471674
      or:
        api: kernel32.CreateMutex @ 0x4716E7
    or:
      or:
        api: WaitForSingleObject @ 0x471715
        and:
          api: GetLastError @ 0x471845, 0x47187B
          or:
            number: 0x2 = ERROR_FILE_NOT_FOUND @ 0x47193E

create mutex
namespace  host-interaction/mutex
author     moritz.raabe@mandiant.com
scope      function
mbc        Process::Create Mutex [C0042]
examples   Practical Malware Analysis Lab 01-01.dll_:0x10001010
function @ 0x471674
  or:
    api: kernel32.CreateMutex @ 0x4716E7

create process on Windows (3 matches)
namespace  host-interaction/process/create
author     moritz.raabe@mandiant.com
scope      basic block
mbc        Process::Create Process [C0017]
examples   9324D1A8AE37A36AE560C37448C9705A:0x406DB0, Practical Malware Analysis Lab 01-04.exe_:0x4011FC
basic block @ 0x460643 in function 0x460579
  and:
    os: windows
    or:
      api: shell32.ShellExecute @ 0x460654
basic block @ 0x46496D in function 0x462CF4
  and:
    os: windows
    or:
      api: kernel32.CreateProcess @ 0x4649B3
basic block @ 0x4708B8 in function 0x4707A4
  and:
    os: windows
    or:
      api: kernel32.CreateProcess @ 0x470915

create or open registry key (16 matches)
namespace  host-interaction/registry
author     michael.hunhoff@mandiant.com
scope      basic block
mbc        Operating System::Registry::Create Registry Key [C0036.004], Operating System::Registry::Open Registry Key [C0036.003]
examples   Practical Malware Analysis Lab 03-02.dll_:0x10004706, Practical Malware Analysis Lab 11-01.exe_:0x401000, 493167E85E45363D09495D0841C30648:0x404D60, B5F85C26D7AA5A1FB4AF5821B6B5AB9B:0x4045F2, B5F85C26D7AA5A1FB4AF5821B6B5AB9B:0x40433E
basic block @ 0x46A975 in function 0x46A924
  or:
    api: advapi32.RegOpenKey @ 0x46A99E
basic block @ 0x46D357 in function 0x46D334
  or:
    api: advapi32.RegCreateKey @ 0x46D35E
basic block @ 0x4719A5 in function 0x471978
  or:
    api: advapi32.RegCreateKey @ 0x4719C5
basic block @ 0x4719EE in function 0x471978
  or:
    api: advapi32.RegCreateKey @ 0x4719F7
basic block @ 0x471AFF in function 0x471ADD
  or:
    api: advapi32.RegOpenKey @ 0x471B1F
basic block @ 0x471B32 in function 0x471ADD
  or:
    api: advapi32.RegOpenKey @ 0x471B3B
basic block @ 0x471F07 in function 0x471F07
  or:
    api: advapi32.RegOpenKey @ 0x471F24
basic block @ 0x471F7B in function 0x471F7B
  or:
    api: advapi32.RegOpenKey @ 0x471F97
basic block @ 0x47208A in function 0x47208A
  or:
    api: advapi32.RegOpenKey @ 0x4720E5
basic block @ 0x47231D in function 0x47231D
  or:
    api: advapi32.RegCreateKey @ 0x472369
basic block @ 0x47244F in function 0x47244F
  or:
    api: advapi32.RegOpenKey @ 0x472480
basic block @ 0x472735 in function 0x472735
  or:
    api: advapi32.RegCreateKeyEx @ 0x47277B
basic block @ 0x472A0D in function 0x472A0D
  or:
    api: advapi32.RegOpenKey @ 0x472A3C
basic block @ 0x472A57 in function 0x472A0D
  or:
    api: advapi32.RegOpenKey @ 0x472A62
basic block @ 0x472AB7 in function 0x472A0D
  or:
    api: advapi32.RegOpenKey @ 0x472AC2
basic block @ 0x472B23 in function 0x472AE6
  or:
    api: advapi32.RegOpenKey @ 0x472B28

query or enumerate registry key (3 matches)
namespace  host-interaction/registry
author     michael.hunhoff@mandiant.com
scope      function
att&ck     Discovery::Query Registry [T1012]
mbc        Operating System::Registry::Query Registry Key [C0036.005]
examples   493167E85E45363D09495D0841C30648:0x404930, B5F85C26D7AA5A1FB4AF5821B6B5AB9B:0x402608
function @ 0x471FD5
  and:
    or:
      api: advapi32.RegEnumKey @ 0x472009, 0x47203B
function @ 0x472A0D
  and:
    optional:
      match: create or open registry key @ 0x472A0D, 0x472A57, 0x472AB7
        or:
          api: advapi32.RegOpenKey @ 0x472AC2
        or:
          api: advapi32.RegOpenKey @ 0x472A3C
        or:
          api: advapi32.RegOpenKey @ 0x472A62
    or:
      api: advapi32.RegEnumKey @ 0x472AA2
function @ 0x472AE6
  and:
    optional:
      match: create or open registry key @ 0x472B23
        or:
          api: advapi32.RegOpenKey @ 0x472B28
    or:
      api: advapi32.RegEnumKey @ 0x472B0D, 0x472B50

query or enumerate registry value (7 matches)
namespace  host-interaction/registry
author     william.ballenthin@mandiant.com, michael.hunhoff@mandiant.com
scope      function
att&ck     Discovery::Query Registry [T1012]
mbc        Operating System::Registry::Query Registry Value [C0036.006]
examples   BFB9B5391A13D0AFD787E87AB90F14F5:0x13145B5A, Practical Malware Analysis Lab 03-02.dll_:0x100047AD
function @ 0x46A924
  and:
    optional:
      match: create or open registry key @ 0x46A975
        or:
          api: advapi32.RegOpenKey @ 0x46A99E
    or:
      api: advapi32.RegQueryValueEx @ 0x46A9C4, 0x46AA01
function @ 0x46D334
  and:
    optional:
      match: create or open registry key @ 0x46D357
        or:
          api: advapi32.RegCreateKey @ 0x46D35E
    or:
      api: advapi32.RegQueryValueEx @ 0x46D38A, 0x46D3C9
function @ 0x471B91
  and:
    or:
      api: advapi32.RegQueryValueEx @ 0x471BC2, 0x471BF6
function @ 0x471C52
  and:
    or:
      api: advapi32.RegQueryValueEx @ 0x471C8C
function @ 0x47208A
  and:
    optional:
      match: create or open registry key @ 0x47208A
        or:
          api: advapi32.RegOpenKey @ 0x4720E5
    or:
      api: advapi32.RegQueryValueEx @ 0x47212F, 0x4721A6
function @ 0x47244F
  and:
    optional:
      match: create or open registry key @ 0x47244F
        or:
          api: advapi32.RegOpenKey @ 0x472480
    or:
      api: advapi32.RegQueryValueEx @ 0x4724E1
function @ 0x472735
  and:
    optional:
      match: create or open registry key @ 0x472735
        or:
          api: advapi32.RegCreateKeyEx @ 0x47277B
    or:
      api: advapi32.RegQueryValueEx @ 0x4727BB, 0x4727F5

set registry value (6 matches)
namespace  host-interaction/registry/create
author     moritz.raabe@mandiant.com, michael.hunhoff@mandiant.com
scope      function
mbc        Operating System::Registry::Set Registry Key [C0036.001]
examples   BFB9B5391A13D0AFD787E87AB90F14F5:0x13147AF0, B5F85C26D7AA5A1FB4AF5821B6B5AB9B:0x40433E, B5F85C26D7AA5A1FB4AF5821B6B5AB9B:0x40415E
function @ 0x471A62
  or:
    and:
      or:
        api: advapi32.RegSetValueEx @ 0x471A88
function @ 0x471A92
  or:
    and:
      or:
        api: advapi32.RegSetValueEx @ 0x471ABA
function @ 0x471DB9
  or:
    and:
      or:
        api: advapi32.RegSetValueEx @ 0x471E0F, 0x471E49, 0x471E83
function @ 0x47208A
  or:
    and:
      optional:
        match: create or open registry key @ 0x47208A
          or:
            api: advapi32.RegOpenKey @ 0x4720E5
      or:
        api: advapi32.RegSetValueEx @ 0x47227A
function @ 0x47231D
  or:
    and:
      optional:
        match: create or open registry key @ 0x47231D
          or:
            api: advapi32.RegCreateKey @ 0x472369
      or:
        api: advapi32.RegSetValueEx @ 0x47238D
function @ 0x472735
  or:
    and:
      optional:
        match: create or open registry key @ 0x472735
          or:
            api: advapi32.RegCreateKeyEx @ 0x47277B
      or:
        api: advapi32.RegSetValueEx @ 0x472953

delete registry key (3 matches)
namespace  host-interaction/registry/delete
author     moritz.raabe@mandiant.com, michael.hunhoff@mandiant.com, johnk3r
scope      function
att&ck     Defense Evasion::Modify Registry [T1112]
mbc        Operating System::Registry::Delete Registry Key [C0036.002]
examples   4f11bdb380dafa2518053c6d20147a05:0x402A36, 493167E85E45363D09495D0841C30648:0x404D60
function @ 0x471F07
  and:
    optional:
      match: create or open registry key @ 0x471F07
        or:
          api: advapi32.RegOpenKey @ 0x471F24
    or:
      api: advapi32.RegDeleteKey @ 0x471F49
function @ 0x472A0D
  and:
    optional:
      match: create or open registry key @ 0x472A0D, 0x472A57, 0x472AB7
        or:
          api: advapi32.RegOpenKey @ 0x472AC2
        or:
          api: advapi32.RegOpenKey @ 0x472A3C
        or:
          api: advapi32.RegOpenKey @ 0x472A62
    or:
      api: advapi32.RegDeleteKey @ 0x472A8C, 0x472AD5
function @ 0x472AE6
  and:
    optional:
      match: create or open registry key @ 0x472B23
        or:
          api: advapi32.RegOpenKey @ 0x472B28
    or:
      api: advapi32.RegDeleteKey @ 0x472B45

delete registry value
namespace  host-interaction/registry/delete
author     michael.hunhoff@mandiant.com
scope      function
att&ck     Defense Evasion::Modify Registry [T1112]
mbc        Operating System::Registry::Delete Registry Value [C0036.007]
examples   B5F85C26D7AA5A1FB4AF5821B6B5AB9B:0x4041A0
function @ 0x472735
  and:
    optional:
      match: create or open registry key @ 0x472735
        or:
          api: advapi32.RegCreateKeyEx @ 0x47277B
    or:
      api: advapi32.RegDeleteValue @ 0x472893

get session user name (2 matches)
namespace  host-interaction/session
author     moritz.raabe@mandiant.com
scope      function
att&ck     Discovery::System Owner/User Discovery [T1033], Discovery::Account Discovery [T1087]
examples   Practical Malware Analysis Lab 14-01.exe_:0x401285
function @ 0x41B0D6
  or:
    api: advapi32.GetUserName @ 0x46CD8B, 0x46CDB7
function @ 0x46CCD5
  or:
    api: advapi32.GetUserName @ 0x46CD8B, 0x46CDB7

compare security identifiers
namespace  host-interaction/sid
author     michael.hunhoff@mandiant.com
scope      basic block
basic block @ 0x46FAE8 in function 0x46F998
  or:
    api: advapi32.EqualSid @ 0x46FAED

create thread (3 matches)
namespace  host-interaction/thread/create
author     moritz.raabe@mandiant.com, michael.hunhoff@mandiant.com, joakim@intezer.com
scope      basic block
mbc        Process::Create Thread [C0038]
examples   946A99F36A46D335DEC080D9A4371940:0x10001DA0, B5F85C26D7AA5A1FB4AF5821B6B5AB9B:0x408020
basic block @ 0x46840A in function 0x4683DB
  or:
    and:
      os: windows
      or:
        api: kernel32.CreateThread @ 0x46841D
basic block @ 0x46B48F in function 0x46B3FC
  or:
    and:
      os: windows
      or:
        api: kernel32.CreateThread @ 0x46B4A5
basic block @ 0x46B6B5 in function 0x46B61B
  or:
    and:
      os: windows
      or:
        api: kernel32.CreateThread @ 0x46B6CB

(internal) packer file limitation
namespace    internal/limitation/file
author       william.ballenthin@mandiant.com
description  This sample appears to be packed.

             Packed samples have often been obfuscated to hide their logic.
             capa cannot handle obfuscation well. This means the results may be misleading or incomplete.
             If possible, you should try to unpack this input file before analyzing it with capa.
scope        file
examples     CD2CBA9E6313E8DF2C1273593E649682
or:
  match: anti-analysis/packer @ 0x522000
    and:
      characteristic: cross section flow @ 0x475BE6, 0x52202C
      not:
        match: contain pusha popa sequence
      or:
        mnemonic: pushad @ 0x522000
      or:
        mnemonic: popad @ 0x52202B

access PEB ldr_data
namespace   linking/runtime-linking
author      moritz.raabe@mandiant.com
scope       basic block
att&ck      Execution::Shared Modules [T1129]
references  https://www.geoffchappell.com/studies/windows/win32/ntdll/structs/peb_ldr_data.htm, https://github.com/d35ha/CallObfuscator/blob/5834aff9ff4511f1408ae4ce80b79737af4ae77b/ShellCode/shell_x64.asm#L8
examples    3FDFB2D522E7DEECAAAF2F87420F7E75:0x4117B7
basic block @ 0x522047 in function 0x522047
  or: = x32
    and: = resolve the PEB
      or:
        match: PEB access @ 0x522047
          or:
            characteristic: peb access @ 0x522058
            and:
              characteristic: fs access @ 0x522058
              or:
                offset/x32: 0x30 @ 0x522058
      offset/x32: 0xC = PEB.LDR_DATA @ 0x52205C
      or: = resolve a module list
        offset/x32: 0xC = PEB.LDR_DATA.InLoadOrderModuleList @ 0x52205C
        offset/x32: 0x14 = PEB.LDR_DATA.InMemoryOrderModuleList @ 0x52205F

link function at runtime on Windows (2 matches)
namespace  linking/runtime-linking
author     moritz.raabe@mandiant.com
scope      function
att&ck     Execution::Shared Modules [T1129]
examples   9324D1A8AE37A36AE560C37448C9705A:0x404130, Practical Malware Analysis Lab 01-04.exe_:0x401350
function @ 0x461DC0
  and:
    os: windows
    or:
      api: kernel32.GetProcAddress @ 0x461E3D, 0x461E56, 0x461E6B, 0x461E80, and 3 more...
    or:
      api: kernel32.GetModuleHandle @ 0x461E27
function @ 0x522000
  and:
    os: windows
    optional:
      characteristic: indirect call @ 0x475BEC, 0x522029
    or:
      api: kernel32.GetProcAddress @ 0x522012
    or:
      api: kernel32.LoadLibrary @ 0x522006

link many functions at runtime
namespace  linking/runtime-linking
author     moritz.raabe@mandiant.com, joakim@intezer.com
scope      function
att&ck     Execution::Shared Modules [T1129]
examples   b7b5e1253710d8927cbe07d52d2d2e10:0x401000
function @ 0x461DC0
  or:
    and:
      os: windows
      match: link function at runtime on Windows @ 0x461DC0
        and:
          os: windows
          or:
            api: kernel32.GetProcAddress @ 0x461E3D, 0x461E56, 0x461E6B, 0x461E80, and 3 more...
          or:
            api: kernel32.GetModuleHandle @ 0x461E27
      or:
        count(api(kernel32.GetProcAddress)): 5 or more @ 0x461E3D, 0x461E56, 0x461E6B, 0x461E80, and 3 more...

enumerate PE sections (7 matches)
namespace   load-code/pe
author      @Ana06
scope       function
mbc         Discovery::Code Discovery::Enumerate PE Sections [B0046.001]
references  https://0x00sec.org/t/reflective-dll-injection/3080, https://www.ired.team/offensive-security/code-injection-process-injection/reflective-dll-injection
examples    E4C33AC3638EEF68311F8AC0D72483C7:0x401510
function @ 0x42D6E5
  and:
    os: windows
    offset: 0x6 = IMAGE_NT_HEADERS.FileHeader.NumberOfSections @ 0x43063A
    subscope:
      or:
        and: = IMAGE_FIRST_SECTION(nt_header)
          offset: 0x14 = IMAGE_NT_HEADERS.FileHeader.SizeOfOptionalHeader @ 0x42F00B
          offset: 0x18 = FileHeader.SizeOfOptionalHeader @ 0x42EFEE, 0x42EFFA
      or:
        and: = IMAGE_FIRST_SECTION(nt_header)
          offset: 0x14 = IMAGE_NT_HEADERS.FileHeader.SizeOfOptionalHeader @ 0x4309ED, 0x430A5D, 0x430ADD, 0x430AE1, and 4 more...
          offset: 0x18 = FileHeader.SizeOfOptionalHeader @ 0x430A18, 0x430B09, 0x430B22, 0x430BB6, and 3 more...
    subscope:
      and:
        offset: 0xC = IMAGE_SECTION_HEADER.VirtualAddress @ 0x42F997, 0x42FAD2, 0x42FB04
        offset: 0x14 = IMAGE_SECTION_HEADER.PointerToRawData @ 0x42FA85
        offset: 0x10 = IMAGE_SECTION_HEADER.SizeOfRawData @ 0x42FA51
      and:
        offset: 0xC = IMAGE_SECTION_HEADER.VirtualAddress @ 0x430A20, 0x430B1A, 0x430B2A, 0x430B36, and 4 more...
        offset: 0x14 = IMAGE_SECTION_HEADER.PointerToRawData @ 0x4309ED, 0x430A5D, 0x430ADD, 0x430AE1, and 4 more...
        offset: 0x10 = IMAGE_SECTION_HEADER.SizeOfRawData @ 0x430A12, 0x430AAF, 0x430AB5, 0x430AFF, and 4 more...
function @ 0x431714
  and:
    os: windows
    offset: 0x6 = IMAGE_NT_HEADERS.FileHeader.NumberOfSections @ 0x431854, 0x4326EB
    subscope:
      or:
        and: = IMAGE_FIRST_SECTION(nt_header)
          offset: 0x14 = IMAGE_NT_HEADERS.FileHeader.SizeOfOptionalHeader @ 0x432249, 0x4322D7, 0x4322DF, 0x432323, and 5 more...
          offset: 0x18 = FileHeader.SizeOfOptionalHeader @ 0x43229D, 0x4322C9, 0x432311, 0x432409, and 4 more...
      or:
        and: = IMAGE_FIRST_SECTION(nt_header)
          offset: 0x14 = IMAGE_NT_HEADERS.FileHeader.SizeOfOptionalHeader @ 0x431B4E, 0x431BE0, 0x431BE6, 0x431C2A, and 5 more...
          offset: 0x18 = FileHeader.SizeOfOptionalHeader @ 0x431B7D, 0x431BFC, 0x431CAC, 0x431CB4, and 5 more...
    subscope:
      and:
        offset: 0xC = IMAGE_SECTION_HEADER.VirtualAddress @ 0x4322AB, 0x43231B, 0x432355, 0x4323F5, and 10 more...
        offset: 0x14 = IMAGE_SECTION_HEADER.PointerToRawData @ 0x432249, 0x4322D7, 0x4322DF, 0x432323, and 5 more...
        offset: 0x10 = IMAGE_SECTION_HEADER.SizeOfRawData @ 0x43226B, 0x4322BD, 0x4323A1, 0x432435, and 6 more...
      and:
        offset: 0xC = IMAGE_SECTION_HEADER.VirtualAddress @ 0x431B6D, 0x431B8A, 0x431BB0, 0x431C1C, and 6 more...
        offset: 0x14 = IMAGE_SECTION_HEADER.PointerToRawData @ 0x431B4E, 0x431BE0, 0x431BE6, 0x431C2A, and 5 more...
        offset: 0x10 = IMAGE_SECTION_HEADER.SizeOfRawData @ 0x431B3B, 0x431B90, 0x431C0A, 0x431C10, and 7 more...
function @ 0x4328D5
  and:
    os: windows
    offset: 0x6 = IMAGE_NT_HEADERS.FileHeader.NumberOfSections @ 0x433C6D
    subscope:
      or:
        and: = IMAGE_FIRST_SECTION(nt_header)
          offset: 0x14 = IMAGE_NT_HEADERS.FileHeader.SizeOfOptionalHeader @ 0x432CA1, 0x432CEF, 0x432D36, 0x432D75, and 4 more...
          offset: 0x18 = FileHeader.SizeOfOptionalHeader @ 0x432D08, 0x432DFD, 0x432E05, 0x432E31, and 2 more...
      or:
        and: = IMAGE_FIRST_SECTION(nt_header)
          offset: 0x14 = IMAGE_NT_HEADERS.FileHeader.SizeOfOptionalHeader @ 0x4330C1, 0x4331EE, 0x4332B3, 0x43335F, and 10 more...
          offset: 0x18 = FileHeader.SizeOfOptionalHeader @ 0x433088, 0x43319E, 0x43334D, 0x4333D5, and 10 more...
      or:
        and: = IMAGE_FIRST_SECTION(nt_header)
          offset: 0x14 = IMAGE_NT_HEADERS.FileHeader.SizeOfOptionalHeader @ 0x433B12
          offset: 0x18 = FileHeader.SizeOfOptionalHeader @ 0x433B36
      or:
        and: = IMAGE_FIRST_SECTION(nt_header)
          offset: 0x14 = IMAGE_NT_HEADERS.FileHeader.SizeOfOptionalHeader @ 0x433AA5
          offset: 0x18 = FileHeader.SizeOfOptionalHeader @ 0x433A9A
    subscope:
      and:
        offset: 0xC = IMAGE_SECTION_HEADER.VirtualAddress @ 0x432C13, 0x432CA5, 0x432CDE, 0x432D57, and 8 more...
        offset: 0x14 = IMAGE_SECTION_HEADER.PointerToRawData @ 0x432CA1, 0x432CEF, 0x432D36, 0x432D75, and 4 more...
        offset: 0x10 = IMAGE_SECTION_HEADER.SizeOfRawData @ 0x432C2E, 0x432CDA, 0x432CF9, 0x432D85, and 4 more...
      and:
        offset: 0xC = IMAGE_SECTION_HEADER.VirtualAddress @ 0x433106, 0x4331BE, 0x4331D3, 0x43339B, and 10 more...
        offset: 0x14 = IMAGE_SECTION_HEADER.PointerToRawData @ 0x4330C1, 0x4331EE, 0x4332B3, 0x43335F, and 10 more...
        offset: 0x10 = IMAGE_SECTION_HEADER.SizeOfRawData @ 0x433083, 0x43316E, 0x4331E8, 0x43328E, and 12 more...
      and:
        offset: 0xC = IMAGE_SECTION_HEADER.VirtualAddress @ 0x433B3E, 0x433CBB
        offset: 0x14 = IMAGE_SECTION_HEADER.PointerToRawData @ 0x433B12
        offset: 0x10 = IMAGE_SECTION_HEADER.SizeOfRawData @ 0x433AF3, 0x433CDD
function @ 0x433D99
  and:
    os: windows
    offset: 0x6 = IMAGE_NT_HEADERS.FileHeader.NumberOfSections @ 0x435172
    subscope:
      or:
        and: = IMAGE_FIRST_SECTION(nt_header)
          offset: 0x14 = IMAGE_NT_HEADERS.FileHeader.SizeOfOptionalHeader @ 0x43508A, 0x4350A6
          offset: 0x18 = FileHeader.SizeOfOptionalHeader @ 0x43505D, 0x4350AC
      or:
        and: = IMAGE_FIRST_SECTION(nt_header)
          offset: 0x14 = IMAGE_NT_HEADERS.FileHeader.SizeOfOptionalHeader @ 0x434602, 0x434650, 0x434664, 0x4346F8, and 7 more...
          offset: 0x18 = FileHeader.SizeOfOptionalHeader @ 0x4345AA, 0x4345F8, 0x434640, 0x434648, and 10 more...
      or:
        and: = IMAGE_FIRST_SECTION(nt_header)
          offset: 0x14 = IMAGE_NT_HEADERS.FileHeader.SizeOfOptionalHeader @ 0x434B84, 0x434C0A, 0x434CA6, 0x434CB0, and 6 more...
          offset: 0x18 = FileHeader.SizeOfOptionalHeader @ 0x434BA2, 0x434BEC, 0x434C36, 0x434C46, and 3 more...
    subscope:
      and:
        offset: 0xC = IMAGE_SECTION_HEADER.VirtualAddress @ 0x434FE9, 0x4351AE, 0x4351CE
        offset: 0x14 = IMAGE_SECTION_HEADER.PointerToRawData @ 0x43508A, 0x4350A6
        offset: 0x10 = IMAGE_SECTION_HEADER.SizeOfRawData @ 0x435037
      and:
        offset: 0xC = IMAGE_SECTION_HEADER.VirtualAddress @ 0x43457C, 0x4345E0, 0x434608, 0x43464C, and 9 more...
        offset: 0x14 = IMAGE_SECTION_HEADER.PointerToRawData @ 0x434602, 0x434650, 0x434664, 0x4346F8, and 7 more...
        offset: 0x10 = IMAGE_SECTION_HEADER.SizeOfRawData @ 0x4345DA, 0x434644, 0x43467C, 0x434710, and 8 more...
      and:
        offset: 0xC = IMAGE_SECTION_HEADER.VirtualAddress @ 0x434B52, 0x434BE8, 0x434BF0, 0x434C32, and 6 more...
        offset: 0x14 = IMAGE_SECTION_HEADER.PointerToRawData @ 0x434B84, 0x434C0A, 0x434CA6, 0x434CB0, and 6 more...
        offset: 0x10 = IMAGE_SECTION_HEADER.SizeOfRawData @ 0x434B7C, 0x434C26, 0x434C2E, 0x434C54, and 6 more...
function @ 0x435605
  and:
    os: windows
    offset: 0x6 = IMAGE_NT_HEADERS.FileHeader.NumberOfSections @ 0x435CF9
    subscope:
      or:
        and: = IMAGE_FIRST_SECTION(nt_header)
          offset: 0x14 = IMAGE_NT_HEADERS.FileHeader.SizeOfOptionalHeader @ 0x4359F2, 0x435A00, 0x435A1C
          offset: 0x18 = FileHeader.SizeOfOptionalHeader @ 0x435A47
    subscope:
      and:
        offset: 0xC = IMAGE_SECTION_HEADER.VirtualAddress @ 0x435A10, 0x435A24, 0x435A2A
        offset: 0x14 = IMAGE_SECTION_HEADER.PointerToRawData @ 0x4359F2, 0x435A00, 0x435A1C
        offset: 0x10 = IMAGE_SECTION_HEADER.SizeOfRawData @ 0x435A3D
function @ 0x44B718
  and:
    os: windows
    offset: 0x6 = IMAGE_NT_HEADERS.FileHeader.NumberOfSections @ 0x44B973, 0x44B990
    subscope:
      or:
        and: = IMAGE_FIRST_SECTION(nt_header)
          offset: 0x14 = IMAGE_NT_HEADERS.FileHeader.SizeOfOptionalHeader @ 0x44B95F
          offset: 0x18 = FileHeader.SizeOfOptionalHeader @ 0x44B952
    subscope:
      and:
        offset: 0xC = IMAGE_SECTION_HEADER.VirtualAddress @ 0x44B726, 0x44B750
        offset: 0x14 = IMAGE_SECTION_HEADER.PointerToRawData @ 0x44B789
        offset: 0x10 = IMAGE_SECTION_HEADER.SizeOfRawData @ 0x44B779
function @ 0x462CF4
  and:
    os: windows
    offset: 0x6 = IMAGE_NT_HEADERS.FileHeader.NumberOfSections @ 0x468D90
    subscope:
      or:
        and: = IMAGE_FIRST_SECTION(nt_header)
          offset: 0x14 = IMAGE_NT_HEADERS.FileHeader.SizeOfOptionalHeader @ 0x465252
          offset: 0x18 = FileHeader.SizeOfOptionalHeader @ 0x46524A
      or:
        and: = IMAGE_FIRST_SECTION(nt_header)
          offset: 0x14 = IMAGE_NT_HEADERS.FileHeader.SizeOfOptionalHeader @ 0x46432F
          offset: 0x18 = FileHeader.SizeOfOptionalHeader @ 0x46433A
      or:
        and: = IMAGE_FIRST_SECTION(nt_header)
          offset: 0x14 = IMAGE_NT_HEADERS.FileHeader.SizeOfOptionalHeader @ 0x4650FE
          offset: 0x18 = FileHeader.SizeOfOptionalHeader @ 0x465127
    subscope:
      and:
        offset: 0xC = IMAGE_SECTION_HEADER.VirtualAddress @ 0x463BF4, 0x463C03
        offset: 0x14 = IMAGE_SECTION_HEADER.PointerToRawData @ 0x463BF7
        offset: 0x10 = IMAGE_SECTION_HEADER.SizeOfRawData @ 0x463BC8, 0x463C20

inspect section memory permissions
namespace    load-code/pe
author       @Ana06
description  translate section memory permissions (specified in the 'Characteristics' field of the image section header) into page protection constants
scope        function
mbc          Discovery::Code Discovery::Inspect Section Memory Permissions [B0046.002]
examples     E4C33AC3638EEF68311F8AC0D72483C7:0x401480
function @ 0x44D636
  and:
    os: windows
    optional:
      number: 0x1 = PAGE_NOACCESS @ 0x44DA20, 0x44DBE8, 0x44DC04, 0x44DC41, and 18 more...
    3 or more:
      and:
        number: 0x40000000 = IMAGE_SCN_MEM_READ @ 0x44D6AD
        number: 0x2 = PAGE_READONLY @ 0x44D65F, 0x44D9B6, 0x44DAFF, 0x44DE7E, and 3 more...
      and:
        number: 0x20000000 = IMAGE_SCN_MEM_EXECUTE @ 0x44D6CC
        number: 0x10 = PAGE_EXECUTE @ 0x44D983, 0x44DCC5, 0x44DCD9, 0x44DFEB, and 5 more...
      and:
        or:
          and:
            number: 0x40000000 = IMAGE_SCN_MEM_READ @ 0x44D6AD
            number: 0x80000000 = IMAGE_SCN_MEM_WRITE @ 0x44E1B7, 0x44E26F
        number: 0x4 = PAGE_READWRITE @ 0x44DDE7

parse PE header (2 matches)
namespace  load-code/pe
author     moritz.raabe@mandiant.com
scope      function
att&ck     Execution::Shared Modules [T1129]
examples   9324D1A8AE37A36AE560C37448C9705A:0x403DD0
function @ 0x41B164
  and:
    os: windows
    and:
      mnemonic: cmp @ 0x41B2A7, 0x41C05B, 0x41C17F, 0x41C1B6, and 1 more...
      or:
        and:
          number: 0x50 @ 0x41BA16
          number: 0x45 @ 0x41C8D7
      or:
        and:
          number: 0x4D @ 0x41B9BF
          number: 0x5A @ 0x41BAFB
function @ 0x41CD2B
  and:
    os: windows
    and:
      mnemonic: cmp @ 0x41D10F, 0x41D12F, 0x41D15B, 0x41D394, and 9 more...
      or:
        and:
          number: 0x50 @ 0x41D1B0, 0x41D74C, 0x41DB06
          number: 0x45 @ 0x41E53F
      or:
        and:
          number: 0x4D @ 0x41D71A
          number: 0x5A @ 0x41D81B



