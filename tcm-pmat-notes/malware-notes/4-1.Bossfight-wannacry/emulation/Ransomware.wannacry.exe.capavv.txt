md5                     db349b97c37d22f5ea1d1841e3c89eb4
sha1                    e889544aff85ffaf8b0d0da705105dee7c97fe26
sha256                  24d004a104d4d54034dbcffc2a4b19a11f39008a575aa614ea04703480b1022c
path                    Ransomware.wannacry.exe.malz
timestamp               2022-08-18T15:53:06.159799
capa version            v3.2.0-0-gd9d72ad
os                      windows
format                  pe
arch                    i386
extractor               VivisectFeatureExtractor
base address            0x400000
rules                   /tmp/_MEItVhdKZ/rules
function count          82
library function count  5
total feature count     52024

check for time delay via GetTickCount
namespace  anti-analysis/anti-debugging/debugger-detection
author     michael.hunhoff@mandiant.com
scope      function
mbc        Anti-Behavioral Analysis::Debugger Detection::Timing/Delay Check GetTickCount [B0001.032]
examples   Practical Malware Analysis Lab 16-03.exe_:0x4013d0
function @ 0x401370
  and:
    count(api(kernel32.GetTickCount)): 2 or more @ 0x401398, 0x4013DC, 0x401418

check for time delay via QueryPerformanceCounter
namespace  anti-analysis/anti-debugging/debugger-detection
author     michael.hunhoff@mandiant.com
scope      function
mbc        Anti-Behavioral Analysis::Debugger Detection::Timing/Delay Check QueryPerformanceCounter [B0001.033]
examples   Practical Malware Analysis Lab 16-03.exe_:0x4011e0
function @ 0x401660
  and:
    count(api(kernel32.QueryPerformanceCounter)): 2 or more @ 0x40174A, 0x401777, 0x401790

contain obfuscated stackstrings
namespace  anti-analysis/obfuscation/string/stackstring
author     moritz.raabe@mandiant.com
scope      basic block
att&ck     Defense Evasion::Obfuscated Files or Information::Indicator Removal from Tools [T1027.005]
mbc        Anti-Static Analysis::Disassembler Evasion::Argument Obfuscation [B0012.001]
examples   Practical Malware Analysis Lab 16-03.exe_:0x4013D0
basic block @ 0x401D80 in function 0x401D80
  characteristic: stack string @ 0x401D80

receive data (5 matches)
namespace    communication
author       william.ballenthin@mandiant.com
description  all known techniques for receiving data from a potential C2 server
scope        function
mbc          Command and Control::C2 Communication::Receive Data [B0030.002]
examples     BFB9B5391A13D0AFD787E87AB90F14F5:0x13145D60
function @ 0x401370
  or:
    match: receive data on socket @ 0x401370
      or:
        api: ws2_32.recv @ 0x4015A4
        api: recv @ 0x4015A4
function @ 0x401980
  or:
    match: receive data on socket @ 0x401980
      or:
        api: ws2_32.recv @ 0x401A18, 0x401A4B, 0x401A9B, 0x401B15
        api: recv @ 0x401A18, 0x401A4B, 0x401A9B, 0x401B15
function @ 0x401B70
  or:
    match: receive data on socket @ 0x401B70
      or:
        api: ws2_32.recv @ 0x401C0C, 0x401C42, 0x401C8D, 0x401CE3, and 1 more...
        api: recv @ 0x401C0C, 0x401C42, 0x401C8D, 0x401CE3, and 1 more...
function @ 0x406F50
  or:
    match: receive data on socket @ 0x406F50
      or:
        api: ws2_32.recv @ 0x407194, 0x407282
        api: recv @ 0x407194, 0x407282
function @ 0x4072A0
  or:
    match: receive data on socket @ 0x4072A0
      or:
        api: ws2_32.recv @ 0x40733C, 0x407372, 0x4073BC, 0x407425
        api: recv @ 0x40733C, 0x407372, 0x4073BC, 0x407425

send data (5 matches)
namespace    communication
author       william.ballenthin@mandiant.com, joakim@intezer.com
description  all known techniques for sending data to a potential C2 server
scope        function
mbc          Command and Control::C2 Communication::Send Data [B0030.001]
examples     BFB9B5391A13D0AFD787E87AB90F14F5:0x13145D60
function @ 0x401370
  or:
    and:
      os: windows
      or:
        match: send data on socket @ 0x401370
          or:
            api: ws2_32.send @ 0x401552
            api: send @ 0x401552
function @ 0x401980
  or:
    and:
      os: windows
      or:
        match: send data on socket @ 0x401980
          or:
            api: ws2_32.send @ 0x4019FD, 0x401A30, 0x401A80, 0x401AFE
            api: send @ 0x4019FD, 0x401A30, 0x401A80, 0x401AFE
function @ 0x401B70
  or:
    and:
      os: windows
      or:
        match: send data on socket @ 0x401B70
          or:
            api: ws2_32.send @ 0x401BF1, 0x401C27, 0x401C72, 0x401CC8, and 1 more...
            api: send @ 0x401BF1, 0x401C27, 0x401C72, 0x401CC8, and 1 more...
function @ 0x406F50
  or:
    and:
      os: windows
      or:
        match: send data on socket @ 0x406F50
          or:
            api: ws2_32.send @ 0x40717A, 0x407268
            api: send @ 0x40717A, 0x407268
function @ 0x4072A0
  or:
    and:
      os: windows
      or:
        match: send data on socket @ 0x4072A0
          or:
            api: ws2_32.send @ 0x407321, 0x407357, 0x4073A1, 0x40740E
            api: send @ 0x407321, 0x407357, 0x4073A1, 0x40740E

connect to URL
namespace  communication/http/client
author     michael.hunhoff@mandiant.com
scope      function
mbc        Communication::HTTP Communication::Open URL [C0002.004]
examples   6f99a2c8944cb02ff28c6f9ced59b161:0x40E2F0
function @ 0x408140
  and:
    api: wininet.InternetOpenUrl @ 0x408194
    optional:
      match: create HTTP request @ 0x408140
        and:
          api: wininet.InternetOpen @ 0x40817B
          optional:
            api: wininet.InternetCloseHandle @ 0x4081A7, 0x4081AB, 0x4081BC, 0x4081BF

create HTTP request
namespace  communication/http/client
author     michael.hunhoff@mandiant.com
scope      function
mbc        Communication::HTTP Communication::Create Request [C0002.012]
examples   6f99a2c8944cb02ff28c6f9ced59b161:0x40E2F0
function @ 0x408140
  and:
    api: wininet.InternetOpen @ 0x40817B
    optional:
      api: wininet.InternetCloseHandle @ 0x4081A7, 0x4081AB, 0x4081BC, 0x4081BF

get socket status
namespace  communication/socket
author     michael.hunhoff@mandiant.com
scope      function
att&ck     Discovery::System Network Configuration Discovery [T1016]
mbc        Communication::Socket Communication::Get Socket Status [C0001.012]
examples   6A352C3E55E8AE5ED39DC1BE7FB964B1:0x1000C1F0
function @ 0x407480
  and:
    api: ws2_32.select @ 0x407522

initialize Winsock library
namespace  communication/socket
author     michael.hunhoff@mandiant.com
scope      function
mbc        Communication::Socket Communication::Initialize Winsock Library [C0001.009]
examples   6A352C3E55E8AE5ED39DC1BE7FB964B1:0x10001D30
function @ 0x407B90
  and:
    api: ws2_32.WSAStartup @ 0x407BA0

set socket configuration
namespace  communication/socket
author     michael.hunhoff@mandiant.com
scope      function
mbc        Communication::Socket Communication::Set Socket Config [C0001.001]
examples   6A352C3E55E8AE5ED39DC1BE7FB964B1:0x1000C1F0
function @ 0x407480
  or:
    api: ws2_32.ioctlsocket @ 0x4074EC

receive data on socket (5 matches)
namespace  communication/socket/receive
author     moritz.raabe@mandiant.com, joakim@intezer.com
scope      function
mbc        Communication::Socket Communication::Receive Data [C0001.006]
examples   Practical Malware Analysis Lab 01-01.dll_:0x10001010
function @ 0x401370
  or:
    api: ws2_32.recv @ 0x4015A4
    api: recv @ 0x4015A4
function @ 0x401980
  or:
    api: ws2_32.recv @ 0x401A18, 0x401A4B, 0x401A9B, 0x401B15
    api: recv @ 0x401A18, 0x401A4B, 0x401A9B, 0x401B15
function @ 0x401B70
  or:
    api: ws2_32.recv @ 0x401C0C, 0x401C42, 0x401C8D, 0x401CE3, and 1 more...
    api: recv @ 0x401C0C, 0x401C42, 0x401C8D, 0x401CE3, and 1 more...
function @ 0x406F50
  or:
    api: ws2_32.recv @ 0x407194, 0x407282
    api: recv @ 0x407194, 0x407282
function @ 0x4072A0
  or:
    api: ws2_32.recv @ 0x40733C, 0x407372, 0x4073BC, 0x407425
    api: recv @ 0x40733C, 0x407372, 0x4073BC, 0x407425

send data on socket (5 matches)
namespace  communication/socket/send
author     moritz.raabe@mandiant.com, joakim@intezer.com
scope      function
mbc        Communication::Socket Communication::Send Data [C0001.007]
examples   Practical Malware Analysis Lab 01-01.dll_:0x10001010
function @ 0x401370
  or:
    api: ws2_32.send @ 0x401552
    api: send @ 0x401552
function @ 0x401980
  or:
    api: ws2_32.send @ 0x4019FD, 0x401A30, 0x401A80, 0x401AFE
    api: send @ 0x4019FD, 0x401A30, 0x401A80, 0x401AFE
function @ 0x401B70
  or:
    api: ws2_32.send @ 0x401BF1, 0x401C27, 0x401C72, 0x401CC8, and 1 more...
    api: send @ 0x401BF1, 0x401C27, 0x401C72, 0x401CC8, and 1 more...
function @ 0x406F50
  or:
    api: ws2_32.send @ 0x40717A, 0x407268
    api: send @ 0x40717A, 0x407268
function @ 0x4072A0
  or:
    api: ws2_32.send @ 0x407321, 0x407357, 0x4073A1, 0x40740E
    api: send @ 0x407321, 0x407357, 0x4073A1, 0x40740E

connect TCP socket
namespace  communication/socket/tcp
author     moritz.raabe@mandiant.com, joakim@intezer.com
scope      function
mbc        Communication::Socket Communication::Connect Socket [C0001.004]
examples   Practical Malware Analysis Lab 01-01.dll_:0x10001010
function @ 0x407480
  and:
    match: create TCP socket @ 0x407480
      and:
        number: 0x6 = IPPROTO_TCP @ 0x4074C0
        number: 0x1 = SOCK_STREAM @ 0x40749D
        number: 0x2 = AF_INET @ 0x4074B4, 0x4074C3
        or:
          api: ws2_32.socket @ 0x4074CA
          api: socket @ 0x4074CA
    or:
      api: connect @ 0x40750D
      api: ws2_32.connect @ 0x40750D

create TCP socket
namespace  communication/socket/tcp
author     william.ballenthin@mandiant.com, joakim@intezer.com
scope      basic block
mbc        Communication::Socket Communication::Create TCP Socket [C0001.011]
examples   Practical Malware Analysis Lab 01-01.dll_:0x10001010
basic block @ 0x407480 in function 0x407480
  and:
    number: 0x6 = IPPROTO_TCP @ 0x4074C0
    number: 0x1 = SOCK_STREAM @ 0x40749D
    number: 0x2 = AF_INET @ 0x4074B4, 0x4074C3
    or:
      api: ws2_32.socket @ 0x4074CA
      api: socket @ 0x4074CA

create UDP socket (4 matches)
namespace  communication/socket/udp/send
author     moritz.raabe@mandiant.com, joakim@intezer.com
scope      basic block
mbc        Communication::Socket Communication::Create UDP Socket [C0001.010]
examples   203BD48BCC18434314AD60F4C8BC21E3D3422EB0624B22B827410F9BC63B4082:0x401240
basic block @ 0x401980 in function 0x401980
  and:
    count(number(0x2 = AF_INET/SOCK_DGRAM)): 2 or more = AF_INET/SOCK_DGRAM @ 0x4019A4, 0x4019C6
    or:
      api: ws2_32.socket @ 0x4019CD
      api: socket @ 0x4019CD
basic block @ 0x401B70 in function 0x401B70
  and:
    count(number(0x2 = AF_INET/SOCK_DGRAM)): 2 or more = AF_INET/SOCK_DGRAM @ 0x401B89, 0x401BB7
    or:
      api: ws2_32.socket @ 0x401BBE
      api: socket @ 0x401BBE
basic block @ 0x4072A0 in function 0x4072A0
  and:
    count(number(0x2 = AF_INET/SOCK_DGRAM)): 2 or more = AF_INET/SOCK_DGRAM @ 0x4072B9, 0x4072E7
    or:
      api: ws2_32.socket @ 0x4072EE
      api: socket @ 0x4072EE
basic block @ 0x407480 in function 0x407480
  and:
    count(number(0x2 = AF_INET/SOCK_DGRAM)): 2 or more = AF_INET/SOCK_DGRAM @ 0x4074B4, 0x4074C3
    or:
      api: ws2_32.socket @ 0x4074CA
      api: socket @ 0x4074CA

act as TCP client
namespace  communication/tcp/client
author     william.ballenthin@mandiant.com
scope      function
mbc        Communication::Socket Communication::TCP Client [C0001.008]
examples   Practical Malware Analysis Lab 01-01.dll_:0x10001010
function @ 0x407480
  and:
    match: connect TCP socket @ 0x407480
      and:
        match: create TCP socket @ 0x407480
          and:
            number: 0x6 = IPPROTO_TCP @ 0x4074C0
            number: 0x1 = SOCK_STREAM @ 0x40749D
            number: 0x2 = AF_INET @ 0x4074B4, 0x4074C3
            or:
              api: ws2_32.socket @ 0x4074CA
              api: socket @ 0x4074CA
        or:
          api: connect @ 0x40750D
          api: ws2_32.connect @ 0x40750D

generate random numbers via WinAPI
namespace  data-manipulation/prng
author     michael.hunhoff@mandiant.com, johnk3r
scope      function
mbc        Cryptography::Generate Pseudo-random Sequence::Use API [C0021.003]
examples   ba947eb07d8c823949316a97364d060f:0x1400031E0, 3ca359f5085bb96a7950d4735b089ffe:0x403A80, e59ffeaf7acb0c326e452fa30bb71a36:0x40403E, 1195d0d18be9362fb8dd9e1738404c9d:0x404E90
function @ 0x407660
  and:
    or:
      api: CryptGenRandom @ 0x40768B

contain a resource (.rsrc) section
namespace  executable/pe/section/rsrc
author     moritz.raabe@mandiant.com
scope      file
examples   A933A1A402775CFA94B6BEE0963F4B46:0x41fd25
section: .rsrc @ 0x710000

extract resource via kernel32 functions
namespace  executable/resource
author     william.ballenthin@mandiant.com
scope      function
examples   BF88E1BD4A3BDE10B419A622278F1FF7:0x401000, Practical Malware Analysis Lab 01-04.exe_:0x4011FC, 563653399B82CD443F120ECEFF836EA3678D4CF11D9B351BB737573C2D856299:0x140001ABA
function @ 0x407CE0
  or:
    and:
      or:
        api: kernel32.LoadResource @ 0x407D86
        api: kernel32.LockResource @ 0x407D95
      optional:
        api: kernel32.GetModuleHandle @ 0x407CEF
        or:
          api: kernel32.FindResource @ 0x407D74
        api: kernel32.SizeofResource @ 0x407DA9

contain an embedded PE file
namespace  executable/subfile/pe
author     moritz.raabe@mandiant.com
scope      file
mbc        Execution::Install Additional Program [B0023]
examples   Practical Malware Analysis Lab 01-04.exe_:0x4060
or:
  count(characteristic(embedded pe)): 1 or more @ 0xB020, 0xF080, 0x320A4

get file size
namespace  host-interaction/file-system/meta
author     michael.hunhoff@mandiant.com
scope      function
att&ck     Discovery::File and Directory Discovery [T1083]
examples   mimikatz.exe_:0x40630D
function @ 0x407A20
  or:
    api: kernel32.GetFileSize @ 0x407B14

move file
namespace  host-interaction/file-system/move
author     moritz.raabe@mandiant.com
scope      function
mbc        File System::Move File [C0063]
examples   Practical Malware Analysis Lab 01-04.exe_:0x401350
function @ 0x407CE0
  or:
    api: kernel32.MoveFileEx @ 0x407E2C

read file on Windows
namespace  host-interaction/file-system/read
author     moritz.raabe@mandiant.com
scope      function
mbc        File System::Read File [C0051]
examples   BFB9B5391A13D0AFD787E87AB90F14F5:0x1314567B
function @ 0x407A20
  and:
    os: windows
    optional:
      and:
        number: 0x80000000 = GENERIC_READ @ 0x407AD9
        or:
          api: kernel32.CreateFile @ 0x407AE3
    or:
      api: kernel32.ReadFile @ 0x407B2F

get number of processors
namespace   host-interaction/hardware/cpu
author      michael.hunhoff@mandiant.com
scope       function
att&ck      Discovery::System Information Discovery [T1082]
references  https://github.com/LordNoteworthy/al-khaser/blob/master/al-khaser/AntiVM/Generic.cpp#L113
examples    al-khaser_x86.exe_:0x432CB0
function @ 0x407720
  and:
    match: PEB access @ 0x407720, 0x4077FA
      or:
        and:
          characteristic: fs access @ 0x407727, 0x40772E
          or:
            offset/x32: 0x30 @ 0x40774E
      or:
        and:
          characteristic: fs access @ 0x40782A
          or:
            offset/x32: 0x30 @ 0x40780B
    or:
      number/x32: 0x64 @ 0x4077B3

terminate process
namespace  host-interaction/process/terminate
author     moritz.raabe@mandiant.com
scope      function
mbc        Process::Terminate Process [C0018]
examples   C91887D861D9BD4A5872249B641BC9F9:0x401A77, 9B7CCAA2AE6A5B96E3110EBCBC4311F6:0x10010307
function @ 0x408000
  and:
    or:
      api: kernel32.ExitProcess @ 0x408086

run as service
namespace  host-interaction/service
author     moritz.raabe@mandiant.com, michael.hunhoff@mandiant.com
scope      file
mbc        Anti-Behavioral Analysis::Conditional Execution::Runs as Service [B0025.007]
examples   Practical Malware Analysis Lab 03-02.dll_
or:
  subscope:
    or:
      api: RegisterServiceCtrlHandler @ 0x408043
    or:
      api: StartServiceCtrlDispatcher @ 0x408126

create service
namespace  host-interaction/service/create
author     moritz.raabe@mandiant.com
scope      function
att&ck     Persistence::Create or Modify System Process::Windows Service [T1543.003], Execution::System Services::Service Execution [T1569.002]
examples   Practical Malware Analysis Lab 03-02.dll_:0x10004706
function @ 0x407C40
  and:
    api: advapi32.CreateService @ 0x407C9B
    optional:
      api: advapi32.OpenSCManager @ 0x407C68

modify service
namespace  host-interaction/service/modify
author     moritz.raabe@mandiant.com
scope      function
att&ck     Persistence::Create or Modify System Process::Windows Service [T1543.003], Execution::System Services::Service Execution [T1569.002]
examples   7D16EFD0078F22C17A4BD78B0F0CC468:0x401000
function @ 0x407FA0
  and:
    or:
      api: advapi32.ChangeServiceConfig2 @ 0x407FF4

start service
namespace  host-interaction/service/start
author     moritz.raabe@mandiant.com
scope      function
att&ck     Persistence::Create or Modify System Process::Windows Service [T1543.003]
examples   E544A4D616B60147D9774B48C2B65EF2:0x401FA0
function @ 0x407C40
  and:
    api: advapi32.StartService @ 0x407CB2
    optional:
      match: get service handle @ 0x407C40
        or:
          api: advapi32.CreateService @ 0x407C9B

create thread (4 matches)
namespace  host-interaction/thread/create
author     moritz.raabe@mandiant.com, michael.hunhoff@mandiant.com, joakim@intezer.com
scope      basic block
mbc        Process::Create Thread [C0038]
examples   946A99F36A46D335DEC080D9A4371940:0x10001DA0, B5F85C26D7AA5A1FB4AF5821B6B5AB9B:0x408020
basic block @ 0x4076C2 in function 0x4076B0
  or:
    and:
      os: windows
      or:
        api: _beginthreadex @ 0x4076D0
basic block @ 0x4077C3 in function 0x407720
  or:
    and:
      os: windows
      or:
        api: _beginthreadex @ 0x4077D4
basic block @ 0x407BDA in function 0x407BD0
  or:
    and:
      os: windows
      or:
        api: _beginthreadex @ 0x407BF3
basic block @ 0x407C0D in function 0x407BD0
  or:
    and:
      os: windows
      or:
        api: _beginthreadex @ 0x407C1B

terminate thread
namespace  host-interaction/thread/terminate
author     moritz.raabe@mandiant.com, michael.hunhoff@mandiant.com
scope      basic block
mbc        Process::Terminate Thread [C0039]
examples   Practical Malware Analysis Lab 03-02.dll_:0x10003286, B5F85C26D7AA5A1FB4AF5821B6B5AB9B:0x407E90
basic block @ 0x4076F2 in function 0x4076B0
  or:
    api: kernel32.TerminateThread @ 0x4076F5

link function at runtime on Windows
namespace  linking/runtime-linking
author     moritz.raabe@mandiant.com
scope      function
att&ck     Execution::Shared Modules [T1129]
examples   9324D1A8AE37A36AE560C37448C9705A:0x404130, Practical Malware Analysis Lab 01-04.exe_:0x401350
function @ 0x407CE0
  and:
    os: windows
    optional:
      characteristic: indirect call @ 0x407D0D, 0x407D1A, 0x407D27, 0x407D34, and 2 more...
    or:
      api: kernel32.GetProcAddress @ 0x407D0D, 0x407D1A, 0x407D27, 0x407D34
    or:
      api: kernel32.GetModuleHandle @ 0x407CEF

linked against ZLIB
namespace  linking/static/zlib
author     william.ballenthin@mandiant.com
scope      file
mbc        Data::Compression Library [C0060]
examples   6cc148363200798a12091b97a17181a1
or:
  regex: /inflate .* Copyright/
    - " inflate 1.1.3 Copyright 1995-1998 Mark Adler " @ 0x3EEE0

inspect section memory permissions
namespace    load-code/pe
author       @Ana06
description  translate section memory permissions (specified in the 'Characteristics' field of the image section header) into page protection constants
scope        function
mbc          Discovery::Code Discovery::Inspect Section Memory Permissions [B0046.002]
examples     E4C33AC3638EEF68311F8AC0D72483C7:0x401480
function @ 0x401D80
  and:
    os: windows
    optional:
      number: 0x1 = PAGE_NOACCESS @ 0x401D90
    3 or more:
      and:
        number: 0x40000000 = IMAGE_SCN_MEM_READ @ 0x4032E9, 0x4035CE, 0x406E04
        number: 0x2 = PAGE_READONLY @ 0x401DAB, 0x402A13, 0x402A92, 0x402B34, and 9 more...
      and:
        number: 0x20000000 = IMAGE_SCN_MEM_EXECUTE @ 0x402557, 0x40263E, 0x4030AD, 0x403217, and 4 more...
        number: 0x10 = PAGE_EXECUTE @ 0x402AA4, 0x402DAC, 0x403071, 0x403136, and 9 more...
      and:
        or:
          number: 0x60000000 = IMAGE_SCN_MEM_READ | IMAGE_SCN_MEM_EXECUTE @ 0x4021F1, 0x402817, 0x4028EA, 0x402972, and 2 more...
          and:
            number: 0x40000000 = IMAGE_SCN_MEM_READ @ 0x4032E9, 0x4035CE, 0x406E04
            number: 0x20000000 = IMAGE_SCN_MEM_EXECUTE @ 0x402557, 0x40263E, 0x4030AD, 0x403217, and 4 more...
        number: 0x20 = PAGE_EXECUTE_READ @ 0x403A62, 0x403C48, 0x404892, 0x406091
      and:
        or:
          number: 0xC0000000 = IMAGE_SCN_MEM_READ | IMAGE_SCN_MEM_WRITE @ 0x4020CC, 0x40272A, 0x4027DA, 0x4031A1, and 5 more...
          and:
            number: 0x40000000 = IMAGE_SCN_MEM_READ @ 0x4032E9, 0x4035CE, 0x406E04
            number: 0x80000000 = IMAGE_SCN_MEM_WRITE @ 0x402131, 0x4021B4, 0x4023C4, 0x402C29, and 6 more...
        number: 0x4 = PAGE_READWRITE @ 0x402B90, 0x402C09, 0x4034F4, 0x40352F, and 13 more...
      and:
        or:
          number: 0xE0000000 = IMAGE_SCN_MEM_READ | IMAGE_SCN_MEM_WRITE | IMAGE_SCN_MEM_EXECUTE @ 0x40250B, 0x40267A, 0x4029E5, 0x402C63, and 4 more...
          and:
            number: 0x40000000 = IMAGE_SCN_MEM_READ @ 0x4032E9, 0x4035CE, 0x406E04
            number: 0x80000000 = IMAGE_SCN_MEM_WRITE @ 0x402131, 0x4021B4, 0x4023C4, 0x402C29, and 6 more...
            number: 0x20000000 = IMAGE_SCN_MEM_EXECUTE @ 0x402557, 0x40263E, 0x4030AD, 0x403217, and 4 more...
        number: 0x40 = PAGE_EXECUTE_READWRITE @ 0x403FDF, 0x404037, 0x404463, 0x404AA8, and 2 more...

persist via Windows service
namespace  persistence/service
author     moritz.raabe@mandiant.com
scope      function
att&ck     Persistence::Create or Modify System Process::Windows Service [T1543.003], Execution::System Services::Service Execution [T1569.002]
examples   Practical Malware Analysis Lab 03-02.dll_:0x10004706
function @ 0x407C40
  or:
    and:
      subscope:
        and:
          number: 0x2 = SERVICE_AUTO_START @ 0x407C87
          api: advapi32.CreateService @ 0x407C9B
      optional:
        or:
          api: advapi32.StartService @ 0x407CB2



